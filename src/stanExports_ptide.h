// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ptide_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 492> locations_array__ =
  {" (found before start of program)",
  " (in 'ptide', line 561, column 2 to column 70)",
  " (in 'ptide', line 562, column 2 to column 63)",
  " (in 'ptide', line 563, column 2 to column 55)",
  " (in 'ptide', line 564, column 2 to column 64)",
  " (in 'ptide', line 565, column 2 to column 57)",
  " (in 'ptide', line 566, column 2 to column 49)",
  " (in 'ptide', line 567, column 2 to column 64)",
  " (in 'ptide', line 568, column 2 to column 57)",
  " (in 'ptide', line 569, column 2 to column 49)",
  " (in 'ptide', line 570, column 2 to column 86)",
  " (in 'ptide', line 571, column 2 to column 79)",
  " (in 'ptide', line 572, column 2 to column 71)",
  " (in 'ptide', line 573, column 2 to column 76)",
  " (in 'ptide', line 574, column 2 to column 69)",
  " (in 'ptide', line 575, column 2 to column 70)",
  " (in 'ptide', line 576, column 2 to column 67)",
  " (in 'ptide', line 577, column 2 to column 70)",
  " (in 'ptide', line 578, column 2 to column 63)",
  " (in 'ptide', line 581, column 2 to column 29)",
  " (in 'ptide', line 582, column 2 to column 20)",
  " (in 'ptide', line 584, column 32 to column 53)",
  " (in 'ptide', line 584, column 11 to column 12)",
  " (in 'ptide', line 584, column 4 to column 89)",
  " (in 'ptide', line 585, column 29 to column 47)",
  " (in 'ptide', line 585, column 11 to column 12)",
  " (in 'ptide', line 585, column 4 to column 80)",
  " (in 'ptide', line 586, column 29 to column 47)",
  " (in 'ptide', line 586, column 11 to column 12)",
  " (in 'ptide', line 586, column 4 to column 80)",
  " (in 'ptide', line 587, column 40 to column 69)",
  " (in 'ptide', line 587, column 11 to column 12)",
  " (in 'ptide', line 587, column 4 to column 113)",
  " (in 'ptide', line 588, column 35 to column 59)",
  " (in 'ptide', line 588, column 11 to column 12)",
  " (in 'ptide', line 588, column 4 to column 98)",
  " (in 'ptide', line 589, column 32 to column 53)",
  " (in 'ptide', line 589, column 11 to column 12)",
  " (in 'ptide', line 589, column 4 to column 89)",
  " (in 'ptide', line 591, column 6 to column 47)",
  " (in 'ptide', line 590, column 4 to line 592, column 17)",
  " (in 'ptide', line 593, column 4 to column 21)",
  " (in 'ptide', line 594, column 4 to column 32)",
  " (in 'ptide', line 595, column 11 to column 20)",
  " (in 'ptide', line 595, column 22 to column 31)",
  " (in 'ptide', line 595, column 4 to column 78)",
  " (in 'ptide', line 596, column 11 to column 20)",
  " (in 'ptide', line 596, column 4 to column 56)",
  " (in 'ptide', line 597, column 11 to column 20)",
  " (in 'ptide', line 597, column 4 to column 62)",
  " (in 'ptide', line 598, column 11 to column 20)",
  " (in 'ptide', line 598, column 22 to column 31)",
  " (in 'ptide', line 598, column 4 to column 50)",
  " (in 'ptide', line 599, column 11 to column 20)",
  " (in 'ptide', line 599, column 22 to column 31)",
  " (in 'ptide', line 599, column 4 to column 48)",
  " (in 'ptide', line 600, column 11 to column 20)",
  " (in 'ptide', line 600, column 4 to column 31)",
  " (in 'ptide', line 642, column 6 to line 678, column 8)",
  " (in 'ptide', line 641, column 11 to line 679, column 5)",
  " (in 'ptide', line 602, column 6 to line 640, column 8)",
  " (in 'ptide', line 601, column 26 to line 641, column 5)",
  " (in 'ptide', line 601, column 4 to line 679, column 5)",
  " (in 'ptide', line 680, column 4 to column 28)",
  " (in 'ptide', line 681, column 4 to column 39)",
  " (in 'ptide', line 682, column 4 to line 686, column 6)",
  " (in 'ptide', line 687, column 4 to line 691, column 6)",
  " (in 'ptide', line 692, column 4 to line 694, column 6)",
  " (in 'ptide', line 695, column 4 to column 51)",
  " (in 'ptide', line 696, column 4 to column 58)",
  " (in 'ptide', line 697, column 4 to column 63)",
  " (in 'ptide', line 698, column 4 to column 58)",
  " (in 'ptide', line 700, column 4 to line 709, column 6)",
  " (in 'ptide', line 583, column 2 to line 710, column 3)",
  " (in 'ptide', line 713, column 2 to column 25)",
  " (in 'ptide', line 716, column 6 to line 719, column 8)",
  " (in 'ptide', line 720, column 6 to line 722, column 8)",
  " (in 'ptide', line 723, column 6 to line 726, column 8)",
  " (in 'ptide', line 715, column 41 to line 727, column 5)",
  " (in 'ptide', line 715, column 4 to line 727, column 5)",
  " (in 'ptide', line 714, column 33 to line 728, column 3)",
  " (in 'ptide', line 714, column 2 to line 728, column 3)",
  " (in 'ptide', line 731, column 6 to line 734, column 8)",
  " (in 'ptide', line 735, column 6 to line 737, column 8)",
  " (in 'ptide', line 738, column 6 to line 741, column 8)",
  " (in 'ptide', line 730, column 38 to line 742, column 5)",
  " (in 'ptide', line 730, column 4 to line 742, column 5)",
  " (in 'ptide', line 729, column 30 to line 743, column 3)",
  " (in 'ptide', line 729, column 2 to line 743, column 3)",
  " (in 'ptide', line 746, column 6 to line 749, column 8)",
  " (in 'ptide', line 750, column 6 to line 752, column 8)",
  " (in 'ptide', line 753, column 6 to line 756, column 8)",
  " (in 'ptide', line 745, column 38 to line 757, column 5)",
  " (in 'ptide', line 745, column 4 to line 757, column 5)",
  " (in 'ptide', line 744, column 30 to line 758, column 3)",
  " (in 'ptide', line 744, column 2 to line 758, column 3)",
  " (in 'ptide', line 761, column 6 to line 764, column 8)",
  " (in 'ptide', line 765, column 6 to line 767, column 8)",
  " (in 'ptide', line 768, column 6 to line 771, column 8)",
  " (in 'ptide', line 760, column 49 to line 772, column 5)",
  " (in 'ptide', line 760, column 4 to line 772, column 5)",
  " (in 'ptide', line 759, column 41 to line 773, column 3)",
  " (in 'ptide', line 759, column 2 to line 773, column 3)",
  " (in 'ptide', line 776, column 6 to line 779, column 8)",
  " (in 'ptide', line 780, column 6 to line 782, column 8)",
  " (in 'ptide', line 783, column 6 to line 786, column 8)",
  " (in 'ptide', line 787, column 6 to line 790, column 8)",
  " (in 'ptide', line 775, column 44 to line 791, column 5)",
  " (in 'ptide', line 775, column 4 to line 791, column 5)",
  " (in 'ptide', line 774, column 36 to line 792, column 3)",
  " (in 'ptide', line 774, column 2 to line 792, column 3)",
  " (in 'ptide', line 795, column 6 to line 798, column 8)",
  " (in 'ptide', line 799, column 6 to line 801, column 8)",
  " (in 'ptide', line 794, column 41 to line 802, column 5)",
  " (in 'ptide', line 794, column 4 to line 802, column 5)",
  " (in 'ptide', line 793, column 33 to line 803, column 3)",
  " (in 'ptide', line 793, column 2 to line 803, column 3)",
  " (in 'ptide', line 475, column 2 to column 17)",
  " (in 'ptide', line 476, column 2 to column 17)",
  " (in 'ptide', line 477, column 2 to column 17)",
  " (in 'ptide', line 478, column 9 to column 10)",
  " (in 'ptide', line 478, column 2 to column 12)",
  " (in 'ptide', line 479, column 9 to column 10)",
  " (in 'ptide', line 479, column 12 to column 13)",
  " (in 'ptide', line 479, column 2 to column 17)",
  " (in 'ptide', line 480, column 9 to column 10)",
  " (in 'ptide', line 480, column 12 to column 13)",
  " (in 'ptide', line 480, column 2 to column 17)",
  " (in 'ptide', line 481, column 9 to column 14)",
  " (in 'ptide', line 481, column 2 to column 32)",
  " (in 'ptide', line 482, column 9 to column 14)",
  " (in 'ptide', line 482, column 16 to column 21)",
  " (in 'ptide', line 482, column 2 to column 44)",
  " (in 'ptide', line 483, column 2 to column 37)",
  " (in 'ptide', line 484, column 44 to column 65)",
  " (in 'ptide', line 484, column 2 to column 67)",
  " (in 'ptide', line 485, column 44 to column 65)",
  " (in 'ptide', line 485, column 2 to column 67)",
  " (in 'ptide', line 486, column 44 to column 65)",
  " (in 'ptide', line 486, column 2 to column 67)",
  " (in 'ptide', line 487, column 36 to column 57)",
  " (in 'ptide', line 487, column 2 to column 59)",
  " (in 'ptide', line 488, column 34 to column 55)",
  " (in 'ptide', line 488, column 2 to column 57)",
  " (in 'ptide', line 489, column 34 to column 55)",
  " (in 'ptide', line 489, column 2 to column 57)",
  " (in 'ptide', line 490, column 2 to column 34)",
  " (in 'ptide', line 491, column 41 to column 59)",
  " (in 'ptide', line 491, column 2 to column 61)",
  " (in 'ptide', line 492, column 41 to column 59)",
  " (in 'ptide', line 492, column 2 to column 61)",
  " (in 'ptide', line 493, column 41 to column 59)",
  " (in 'ptide', line 493, column 2 to column 61)",
  " (in 'ptide', line 494, column 33 to column 51)",
  " (in 'ptide', line 494, column 2 to column 53)",
  " (in 'ptide', line 495, column 31 to column 49)",
  " (in 'ptide', line 495, column 2 to column 51)",
  " (in 'ptide', line 496, column 31 to column 49)",
  " (in 'ptide', line 496, column 2 to column 51)",
  " (in 'ptide', line 497, column 2 to column 34)",
  " (in 'ptide', line 498, column 41 to column 59)",
  " (in 'ptide', line 498, column 2 to column 61)",
  " (in 'ptide', line 499, column 41 to column 59)",
  " (in 'ptide', line 499, column 2 to column 61)",
  " (in 'ptide', line 500, column 41 to column 59)",
  " (in 'ptide', line 500, column 2 to column 61)",
  " (in 'ptide', line 501, column 33 to column 51)",
  " (in 'ptide', line 501, column 2 to column 53)",
  " (in 'ptide', line 502, column 31 to column 49)",
  " (in 'ptide', line 502, column 2 to column 51)",
  " (in 'ptide', line 503, column 31 to column 49)",
  " (in 'ptide', line 503, column 2 to column 51)",
  " (in 'ptide', line 504, column 2 to column 45)",
  " (in 'ptide', line 505, column 52 to column 81)",
  " (in 'ptide', line 505, column 2 to column 83)",
  " (in 'ptide', line 506, column 52 to column 81)",
  " (in 'ptide', line 506, column 2 to column 83)",
  " (in 'ptide', line 507, column 52 to column 81)",
  " (in 'ptide', line 507, column 2 to column 83)",
  " (in 'ptide', line 508, column 44 to column 73)",
  " (in 'ptide', line 508, column 2 to column 75)",
  " (in 'ptide', line 509, column 42 to column 71)",
  " (in 'ptide', line 509, column 2 to column 73)",
  " (in 'ptide', line 510, column 42 to column 71)",
  " (in 'ptide', line 510, column 2 to column 73)",
  " (in 'ptide', line 511, column 2 to column 40)",
  " (in 'ptide', line 512, column 38 to column 62)",
  " (in 'ptide', line 512, column 2 to column 64)",
  " (in 'ptide', line 513, column 47 to column 71)",
  " (in 'ptide', line 513, column 2 to column 73)",
  " (in 'ptide', line 514, column 47 to column 71)",
  " (in 'ptide', line 514, column 2 to column 73)",
  " (in 'ptide', line 515, column 47 to column 71)",
  " (in 'ptide', line 515, column 2 to column 73)",
  " (in 'ptide', line 516, column 39 to column 63)",
  " (in 'ptide', line 516, column 2 to column 65)",
  " (in 'ptide', line 517, column 46 to column 70)",
  " (in 'ptide', line 517, column 2 to column 72)",
  " (in 'ptide', line 518, column 46 to column 70)",
  " (in 'ptide', line 518, column 2 to column 72)",
  " (in 'ptide', line 519, column 43 to column 67)",
  " (in 'ptide', line 519, column 2 to column 69)",
  " (in 'ptide', line 520, column 43 to column 67)",
  " (in 'ptide', line 520, column 2 to column 69)",
  " (in 'ptide', line 521, column 2 to column 37)",
  " (in 'ptide', line 522, column 44 to column 65)",
  " (in 'ptide', line 522, column 2 to column 67)",
  " (in 'ptide', line 523, column 44 to column 65)",
  " (in 'ptide', line 523, column 2 to column 67)",
  " (in 'ptide', line 524, column 36 to column 57)",
  " (in 'ptide', line 524, column 2 to column 59)",
  " (in 'ptide', line 526, column 2 to column 25)",
  " (in 'ptide', line 527, column 2 to column 24)",
  " (in 'ptide', line 528, column 20 to column 29)",
  " (in 'ptide', line 528, column 2 to column 31)",
  " (in 'ptide', line 529, column 23 to column 31)",
  " (in 'ptide', line 529, column 2 to column 33)",
  " (in 'ptide', line 530, column 24 to column 32)",
  " (in 'ptide', line 530, column 2 to column 34)",
  " (in 'ptide', line 531, column 25 to column 33)",
  " (in 'ptide', line 531, column 2 to column 35)",
  " (in 'ptide', line 533, column 2 to column 19)",
  " (in 'ptide', line 534, column 2 to column 26)",
  " (in 'ptide', line 535, column 2 to column 15)",
  " (in 'ptide', line 538, column 2 to column 54)",
  " (in 'ptide', line 539, column 2 to column 24)",
  " (in 'ptide', line 540, column 2 to column 24)",
  " (in 'ptide', line 541, column 9 to column 18)",
  " (in 'ptide', line 541, column 2 to column 45)",
  " (in 'ptide', line 542, column 9 to column 18)",
  " (in 'ptide', line 542, column 2 to column 36)",
  " (in 'ptide', line 543, column 9 to column 18)",
  " (in 'ptide', line 543, column 20 to column 29)",
  " (in 'ptide', line 543, column 2 to column 41)",
  " (in 'ptide', line 544, column 9 to column 18)",
  " (in 'ptide', line 544, column 20 to column 29)",
  " (in 'ptide', line 544, column 2 to line 546, column 4)",
  " (in 'ptide', line 547, column 2 to column 50)",
  " (in 'ptide', line 550, column 6 to column 46)",
  " (in 'ptide', line 551, column 6 to column 40)",
  " (in 'ptide', line 552, column 6 to line 555, column 18)",
  " (in 'ptide', line 549, column 21 to line 556, column 5)",
  " (in 'ptide', line 549, column 4 to line 556, column 5)",
  " (in 'ptide', line 548, column 19 to line 557, column 3)",
  " (in 'ptide', line 548, column 2 to line 557, column 3)",
  " (in 'ptide', line 558, column 2 to column 60)",
  " (in 'ptide', line 561, column 47 to column 68)",
  " (in 'ptide', line 561, column 18 to column 19)",
  " (in 'ptide', line 562, column 40 to column 61)",
  " (in 'ptide', line 562, column 23 to column 24)",
  " (in 'ptide', line 563, column 32 to column 53)",
  " (in 'ptide', line 564, column 44 to column 62)",
  " (in 'ptide', line 564, column 18 to column 19)",
  " (in 'ptide', line 565, column 37 to column 55)",
  " (in 'ptide', line 565, column 23 to column 24)",
  " (in 'ptide', line 566, column 29 to column 47)",
  " (in 'ptide', line 567, column 44 to column 62)",
  " (in 'ptide', line 567, column 18 to column 19)",
  " (in 'ptide', line 568, column 37 to column 55)",
  " (in 'ptide', line 568, column 23 to column 24)",
  " (in 'ptide', line 569, column 29 to column 47)",
  " (in 'ptide', line 570, column 55 to column 84)",
  " (in 'ptide', line 570, column 18 to column 19)",
  " (in 'ptide', line 571, column 48 to column 77)",
  " (in 'ptide', line 571, column 23 to column 24)",
  " (in 'ptide', line 572, column 40 to column 69)",
  " (in 'ptide', line 573, column 50 to column 74)",
  " (in 'ptide', line 573, column 18 to column 19)",
  " (in 'ptide', line 574, column 43 to column 67)",
  " (in 'ptide', line 574, column 23 to column 24)",
  " (in 'ptide', line 575, column 44 to column 68)",
  " (in 'ptide', line 576, column 41 to column 65)",
  " (in 'ptide', line 577, column 47 to column 68)",
  " (in 'ptide', line 577, column 18 to column 19)",
  " (in 'ptide', line 578, column 40 to column 61)",
  " (in 'ptide', line 578, column 23 to column 24)",
  " (in 'ptide', line 581, column 9 to column 18)",
  " (in 'ptide', line 8, column 4 to column 20)",
  " (in 'ptide', line 9, column 11 to column 12)",
  " (in 'ptide', line 9, column 14 to column 15)",
  " (in 'ptide', line 9, column 4 to column 24)",
  " (in 'ptide', line 12, column 8 to line 16, column 10)",
  " (in 'ptide', line 17, column 8 to column 36)",
  " (in 'ptide', line 11, column 29 to line 18, column 7)",
  " (in 'ptide', line 11, column 6 to line 18, column 7)",
  " (in 'ptide', line 19, column 6 to column 33)",
  " (in 'ptide', line 10, column 21 to line 20, column 5)",
  " (in 'ptide', line 10, column 4 to line 20, column 5)",
  " (in 'ptide', line 21, column 4 to column 18)",
  " (in 'ptide', line 7, column 4 to line 22, column 3)",
  " (in 'ptide', line 30, column 4 to column 20)",
  " (in 'ptide', line 31, column 11 to column 12)",
  " (in 'ptide', line 31, column 14 to column 15)",
  " (in 'ptide', line 31, column 4 to column 61)",
  " (in 'ptide', line 34, column 8 to line 38, column 10)",
  " (in 'ptide', line 39, column 8 to column 36)",
  " (in 'ptide', line 33, column 29 to line 40, column 7)",
  " (in 'ptide', line 33, column 6 to line 40, column 7)",
  " (in 'ptide', line 32, column 21 to line 41, column 5)",
  " (in 'ptide', line 32, column 4 to line 41, column 5)",
  " (in 'ptide', line 42, column 4 to column 18)",
  " (in 'ptide', line 29, column 4 to line 43, column 3)",
  " (in 'ptide', line 49, column 4 to column 66)",
  " (in 'ptide', line 48, column 4 to line 50, column 3)",
  " (in 'ptide', line 55, column 4 to column 22)",
  " (in 'ptide', line 56, column 4 to column 22)",
  " (in 'ptide', line 57, column 11 to column 20)",
  " (in 'ptide', line 57, column 22 to column 31)",
  " (in 'ptide', line 57, column 4 to column 40)",
  " (in 'ptide', line 60, column 15 to column 18)",
  " (in 'ptide', line 60, column 20 to column 23)",
  " (in 'ptide', line 60, column 8 to column 60)",
  " (in 'ptide', line 61, column 8 to line 64, column 25)",
  " (in 'ptide', line 65, column 8 to line 68, column 25)",
  " (in 'ptide', line 59, column 33 to line 69, column 7)",
  " (in 'ptide', line 59, column 6 to line 69, column 7)",
  " (in 'ptide', line 58, column 27 to line 70, column 5)",
  " (in 'ptide', line 58, column 4 to line 70, column 5)",
  " (in 'ptide', line 71, column 4 to column 18)",
  " (in 'ptide', line 54, column 4 to line 72, column 3)",
  " (in 'ptide', line 77, column 4 to column 41)",
  " (in 'ptide', line 76, column 4 to line 78, column 3)",
  " (in 'ptide', line 83, column 6 to column 41)",
  " (in 'ptide', line 82, column 11 to line 84, column 5)",
  " (in 'ptide', line 81, column 6 to column 15)",
  " (in 'ptide', line 80, column 16 to line 82, column 5)",
  " (in 'ptide', line 80, column 4 to line 84, column 5)",
  " (in 'ptide', line 79, column 53 to line 85, column 3)",
  " (in 'ptide', line 87, column 4 to column 42)",
  " (in 'ptide', line 88, column 4 to column 34)",
  " (in 'ptide', line 89, column 4 to column 24)",
  " (in 'ptide', line 91, column 6 to column 70)",
  " (in 'ptide', line 93, column 8 to column 32)",
  " (in 'ptide', line 92, column 35 to line 94, column 7)",
  " (in 'ptide', line 92, column 6 to line 94, column 7)",
  " (in 'ptide', line 95, column 6 to column 54)",
  " (in 'ptide', line 90, column 26 to line 96, column 5)",
  " (in 'ptide', line 90, column 4 to line 96, column 5)",
  " (in 'ptide', line 97, column 4 to column 23)",
  " (in 'ptide', line 86, column 46 to line 98, column 3)",
  " (in 'ptide', line 127, column 4 to column 20)",
  " (in 'ptide', line 128, column 4 to column 26)",
  " (in 'ptide', line 129, column 4 to column 54)",
  " (in 'ptide', line 130, column 4 to column 48)",
  " (in 'ptide', line 131, column 4 to column 48)",
  " (in 'ptide', line 132, column 4 to column 70)",
  " (in 'ptide', line 133, column 4 to column 69)",
  " (in 'ptide', line 134, column 4 to column 56)",
  " (in 'ptide', line 135, column 11 to column 20)",
  " (in 'ptide', line 135, column 22 to column 31)",
  " (in 'ptide', line 135, column 4 to column 78)",
  " (in 'ptide', line 136, column 11 to column 12)",
  " (in 'ptide', line 136, column 14 to column 15)",
  " (in 'ptide', line 136, column 4 to column 29)",
  " (in 'ptide', line 139, column 8 to line 149, column 10)",
  " (in 'ptide', line 138, column 43 to line 150, column 7)",
  " (in 'ptide', line 138, column 6 to line 150, column 7)",
  " (in 'ptide', line 137, column 35 to line 151, column 5)",
  " (in 'ptide', line 137, column 4 to line 151, column 5)",
  " (in 'ptide', line 154, column 8 to line 164, column 10)",
  " (in 'ptide', line 153, column 40 to line 165, column 7)",
  " (in 'ptide', line 153, column 6 to line 165, column 7)",
  " (in 'ptide', line 152, column 32 to line 166, column 5)",
  " (in 'ptide', line 152, column 4 to line 166, column 5)",
  " (in 'ptide', line 169, column 8 to line 179, column 10)",
  " (in 'ptide', line 168, column 40 to line 180, column 7)",
  " (in 'ptide', line 168, column 6 to line 180, column 7)",
  " (in 'ptide', line 167, column 32 to line 181, column 5)",
  " (in 'ptide', line 167, column 4 to line 181, column 5)",
  " (in 'ptide', line 184, column 8 to line 194, column 10)",
  " (in 'ptide', line 183, column 51 to line 195, column 7)",
  " (in 'ptide', line 183, column 6 to line 195, column 7)",
  " (in 'ptide', line 182, column 43 to line 196, column 5)",
  " (in 'ptide', line 182, column 4 to line 196, column 5)",
  " (in 'ptide', line 199, column 8 to line 208, column 10)",
  " (in 'ptide', line 198, column 46 to line 209, column 7)",
  " (in 'ptide', line 198, column 6 to line 209, column 7)",
  " (in 'ptide', line 197, column 38 to line 210, column 5)",
  " (in 'ptide', line 197, column 4 to line 210, column 5)",
  " (in 'ptide', line 213, column 8 to column 81)",
  " (in 'ptide', line 217, column 14 to line 220, column 45)",
  " (in 'ptide', line 216, column 29 to line 221, column 13)",
  " (in 'ptide', line 216, column 12 to line 221, column 13)",
  " (in 'ptide', line 215, column 31 to line 222, column 11)",
  " (in 'ptide', line 215, column 10 to line 222, column 11)",
  " (in 'ptide', line 214, column 29 to line 223, column 9)",
  " (in 'ptide', line 214, column 8 to line 223, column 9)",
  " (in 'ptide', line 212, column 43 to line 224, column 7)",
  " (in 'ptide', line 212, column 6 to line 224, column 7)",
  " (in 'ptide', line 211, column 35 to line 225, column 5)",
  " (in 'ptide', line 211, column 4 to line 225, column 5)",
  " (in 'ptide', line 226, column 4 to column 18)",
  " (in 'ptide', line 126, column 4 to line 227, column 3)",
  " (in 'ptide', line 304, column 4 to column 20)",
  " (in 'ptide', line 305, column 4 to column 36)",
  " (in 'ptide', line 306, column 4 to column 61)",
  " (in 'ptide', line 307, column 23 to column 38)",
  " (in 'ptide', line 307, column 4 to column 72)",
  " (in 'ptide', line 308, column 25 to column 40)",
  " (in 'ptide', line 308, column 4 to column 42)",
  " (in 'ptide', line 309, column 31 to column 46)",
  " (in 'ptide', line 309, column 4 to column 80)",
  " (in 'ptide', line 310, column 28 to column 43)",
  " (in 'ptide', line 310, column 4 to column 45)",
  " (in 'ptide', line 312, column 4 to column 21)",
  " (in 'ptide', line 313, column 4 to column 32)",
  " (in 'ptide', line 314, column 11 to column 20)",
  " (in 'ptide', line 314, column 22 to column 31)",
  " (in 'ptide', line 314, column 4 to column 78)",
  " (in 'ptide', line 315, column 11 to column 20)",
  " (in 'ptide', line 315, column 4 to column 56)",
  " (in 'ptide', line 316, column 11 to column 20)",
  " (in 'ptide', line 316, column 4 to column 62)",
  " (in 'ptide', line 318, column 6 to column 49)",
  " (in 'ptide', line 319, column 6 to column 111)",
  " (in 'ptide', line 317, column 27 to line 320, column 5)",
  " (in 'ptide', line 317, column 4 to line 320, column 5)",
  " (in 'ptide', line 322, column 6 to column 40)",
  " (in 'ptide', line 323, column 6 to column 26)",
  " (in 'ptide', line 325, column 8 to column 63)",
  " (in 'ptide', line 324, column 21 to line 326, column 7)",
  " (in 'ptide', line 324, column 6 to line 326, column 7)",
  " (in 'ptide', line 327, column 6 to line 329, column 12)",
  " (in 'ptide', line 330, column 6 to column 41)",
  " (in 'ptide', line 321, column 27 to line 331, column 5)",
  " (in 'ptide', line 321, column 4 to line 331, column 5)",
  " (in 'ptide', line 334, column 8 to column 53)",
  " (in 'ptide', line 335, column 8 to column 64)",
  " (in 'ptide', line 336, column 8 to column 49)",
  " (in 'ptide', line 337, column 15 to column 41)",
  " (in 'ptide', line 337, column 43 to column 69)",
  " (in 'ptide', line 337, column 8 to column 79)",
  " (in 'ptide', line 338, column 15 to column 41)",
  " (in 'ptide', line 338, column 43 to column 69)",
  " (in 'ptide', line 338, column 8 to column 79)",
  " (in 'ptide', line 339, column 34 to column 52)",
  " (in 'ptide', line 339, column 8 to column 54)",
  " (in 'ptide', line 344, column 10 to column 36)",
  " (in 'ptide', line 345, column 10 to column 61)",
  " (in 'ptide', line 343, column 8 to line 346, column 18)",
  " (in 'ptide', line 348, column 10 to column 36)",
  " (in 'ptide', line 349, column 10 to column 61)",
  " (in 'ptide', line 347, column 8 to line 350, column 24)",
  " (in 'ptide', line 352, column 10 to line 354, column 12)",
  " (in 'ptide', line 355, column 10 to column 75)",
  " (in 'ptide', line 356, column 44 to column 70)",
  " (in 'ptide', line 356, column 10 to column 72)",
  " (in 'ptide', line 357, column 10 to line 359, column 12)",
  " (in 'ptide', line 362, column 14 to line 364, column 16)",
  " (in 'ptide', line 361, column 46 to line 365, column 13)",
  " (in 'ptide', line 361, column 12 to line 365, column 13)",
  " (in 'ptide', line 360, column 27 to line 366, column 11)",
  " (in 'ptide', line 360, column 10 to line 366, column 11)",
  " (in 'ptide', line 367, column 10 to line 370, column 58)",
  " (in 'ptide', line 371, column 10 to line 374, column 55)",
  " (in 'ptide', line 375, column 10 to line 378, column 61)",
  " (in 'ptide', line 351, column 41 to line 379, column 9)",
  " (in 'ptide', line 351, column 8 to line 379, column 9)",
  " (in 'ptide', line 380, column 8 to line 408, column 10)",
  " (in 'ptide', line 409, column 8 to column 46)",
  " (in 'ptide', line 410, column 8 to column 63)",
  " (in 'ptide', line 412, column 10 to line 414, column 12)",
  " (in 'ptide', line 415, column 10 to column 75)",
  " (in 'ptide', line 416, column 10 to column 92)",
  " (in 'ptide', line 417, column 50 to column 84)",
  " (in 'ptide', line 417, column 10 to column 86)",
  " (in 'ptide', line 418, column 10 to line 420, column 12)",
  " (in 'ptide', line 423, column 14 to line 425, column 77)",
  " (in 'ptide', line 422, column 58 to line 426, column 13)",
  " (in 'ptide', line 422, column 12 to line 426, column 13)",
  " (in 'ptide', line 421, column 27 to line 427, column 11)",
  " (in 'ptide', line 421, column 10 to line 427, column 11)",
  " (in 'ptide', line 428, column 10 to line 433, column 12)",
  " (in 'ptide', line 434, column 10 to line 439, column 12)",
  " (in 'ptide', line 440, column 10 to line 448, column 12)",
  " (in 'ptide', line 449, column 10 to line 457, column 12)",
  " (in 'ptide', line 458, column 10 to line 461, column 13)",
  " (in 'ptide', line 411, column 41 to line 462, column 9)",
  " (in 'ptide', line 411, column 8 to line 462, column 9)",
  " (in 'ptide', line 333, column 33 to line 463, column 7)",
  " (in 'ptide', line 333, column 6 to line 463, column 7)",
  " (in 'ptide', line 332, column 35 to line 464, column 5)",
  " (in 'ptide', line 332, column 4 to line 464, column 5)",
  " (in 'ptide', line 465, column 11 to column 52)",
  " (in 'ptide', line 465, column 4 to column 61)",
  " (in 'ptide', line 466, column 4 to column 24)",
  " (in 'ptide', line 467, column 4 to column 35)",
  " (in 'ptide', line 468, column 4 to column 62)",
  " (in 'ptide', line 469, column 4 to column 100)",
  " (in 'ptide', line 470, column 4 to column 79)",
  " (in 'ptide', line 471, column 4 to column 18)",
  " (in 'ptide', line 303, column 4 to line 472, column 3)"};
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>,-1,-1>
cov_periodic(const std::vector<T0__>& x, const T1__& tau, const T2__& ell,
             const T3__& period, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>,-1,-1>
cov_quasi_periodic(const std::vector<T0__>& x, const T1__& tau, const T2__&
                   ell, const T3__& ell_decay, const T4__& period,
                   std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
chol_solve_L_b(const T0__& L_arg__, const T1__& b_arg__, std::ostream*
               pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
kronecker_product_sym(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
compose_covariance(const T0__& sigma_arg__, const T1__& L_arg__,
                   std::ostream* pstream__);
int
get_block_start(const int& i, const std::vector<int>& block_last_index,
                std::ostream* pstream__);
int
get_n_block_max(const std::vector<int>& block_last_index, std::ostream*
                pstream__);
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__, typename T19__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T17__>,
                              stan::is_stan_scalar<T18__>,
                              stan::is_stan_scalar<T19__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, T4__, T5__, T6__,
                stan::promote_args_t<T7__, T8__, T9__, T10__, T11__,
                  stan::promote_args_t<T12__, T13__, T14__, T15__, T16__,
                    stan::promote_args_t<T17__, T18__, T19__>>>>,-1,-1>
process_covariance(const std::vector<double>& x, const int& d,
                   const std::vector<Eigen::Matrix<T2__,-1,1>>&
                   exponential_sigma,
                   const std::vector<Eigen::Matrix<T3__,-1,-1>>&
                   exponential_L, const std::vector<T4__>& exponential_ell,
                   const std::vector<Eigen::Matrix<T5__,-1,1>>&
                   matern32_sigma,
                   const std::vector<Eigen::Matrix<T6__,-1,-1>>& matern32_L,
                   const std::vector<T7__>& matern32_ell,
                   const std::vector<Eigen::Matrix<T8__,-1,1>>&
                   matern52_sigma,
                   const std::vector<Eigen::Matrix<T9__,-1,-1>>& matern52_L,
                   const std::vector<T10__>& matern52_ell,
                   const std::vector<Eigen::Matrix<T11__,-1,1>>&
                   squared_exponential_sigma,
                   const std::vector<Eigen::Matrix<T12__,-1,-1>>&
                   squared_exponential_L, const std::vector<T13__>&
                   squared_exponential_ell,
                   const std::vector<Eigen::Matrix<T14__,-1,1>>&
                   quasi_periodic_sigma,
                   const std::vector<Eigen::Matrix<T15__,-1,-1>>&
                   quasi_periodic_L, const std::vector<T16__>&
                   quasi_periodic_ell_periodic, const std::vector<T17__>&
                   quasi_periodic_ell_decay,
                   const std::vector<Eigen::Matrix<T18__,-1,1>>&
                   white_noise_sigma,
                   const std::vector<Eigen::Matrix<T19__,-1,-1>>&
                   white_noise_L, const std::vector<double>&
                   exponential_length_dilation, const std::vector<double>&
                   matern32_length_dilation, const std::vector<double>&
                   matern52_length_dilation, const std::vector<double>&
                   squared_exponential_length_dilation,
                   const std::vector<double>& quasi_periodic_period,
                   const std::vector<double>& quasi_periodic_length_dilation,
                   std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__, typename T19__, typename T22__, typename T23__,
          typename T24__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T17__>,
                              stan::is_stan_scalar<T18__>,
                              stan::is_stan_scalar<T19__>,
                              stan::is_col_vector<T22__>,
                              stan::is_vt_not_complex<T22__>,
                              stan::is_col_vector<T23__>,
                              stan::is_vt_not_complex<T23__>,
                              stan::is_eigen_matrix_dynamic<T24__>,
                              stan::is_vt_not_complex<T24__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, T4__, T5__, T6__,
                stan::promote_args_t<T7__, T8__, T9__, T10__, T11__,
                  stan::promote_args_t<T12__, T13__, T14__, T15__, T16__,
                    stan::promote_args_t<T17__, T18__, T19__,
                      stan::base_type_t<T22__>, stan::base_type_t<T23__>,
                      stan::promote_args_t<stan::base_type_t<T24__>>>>>>,-1,1>
vecchia_partial_sums(const int& start, const int& end,
                     const std::vector<Eigen::Matrix<T2__,-1,1>>&
                     exponential_sigma,
                     const std::vector<Eigen::Matrix<T3__,-1,-1>>&
                     exponential_L, const std::vector<T4__>& exponential_ell,
                     const std::vector<Eigen::Matrix<T5__,-1,1>>&
                     matern32_sigma,
                     const std::vector<Eigen::Matrix<T6__,-1,-1>>&
                     matern32_L, const std::vector<T7__>& matern32_ell,
                     const std::vector<Eigen::Matrix<T8__,-1,1>>&
                     matern52_sigma,
                     const std::vector<Eigen::Matrix<T9__,-1,-1>>&
                     matern52_L, const std::vector<T10__>& matern52_ell,
                     const std::vector<Eigen::Matrix<T11__,-1,1>>&
                     squared_exponential_sigma,
                     const std::vector<Eigen::Matrix<T12__,-1,-1>>&
                     squared_exponential_L, const std::vector<T13__>&
                     squared_exponential_ell,
                     const std::vector<Eigen::Matrix<T14__,-1,1>>&
                     quasi_periodic_sigma,
                     const std::vector<Eigen::Matrix<T15__,-1,-1>>&
                     quasi_periodic_L, const std::vector<T16__>&
                     quasi_periodic_ell_periodic, const std::vector<T17__>&
                     quasi_periodic_ell_decay,
                     const std::vector<Eigen::Matrix<T18__,-1,1>>&
                     white_noise_sigma,
                     const std::vector<Eigen::Matrix<T19__,-1,-1>>&
                     white_noise_L, const std::vector<double>& x, const int&
                     d, const T22__& y_stacked_arg__, const T23__&
                     y_stacked_tilde_arg__, const T24__& X_stacked_arg__,
                     const std::vector<double>& exponential_length_dilation,
                     const std::vector<double>& matern32_length_dilation,
                     const std::vector<double>& matern52_length_dilation,
                     const std::vector<double>&
                     squared_exponential_length_dilation,
                     const std::vector<double>& quasi_periodic_period,
                     const std::vector<double>&
                     quasi_periodic_length_dilation, const std::vector<int>&
                     block_indices, const std::vector<int>& block_last_index,
                     const std::vector<int>& block_n_responses,
                     const std::vector<int>& block_kernel_group,
                     std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__>,-1,-1>
cov_periodic(const std::vector<T0__>& x, const T1__& tau, const T2__& ell,
             const T3__& period, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 277;
    n = stan::math::size(x);
    current_statement__ = 278;
    stan::math::validate_non_negative_index("output", "n", n);
    current_statement__ = 279;
    stan::math::validate_non_negative_index("output", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,-1> output =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, n, DUMMY_VAR__);
    current_statement__ = 287;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 284;
      for (int j = (i + 1); j <= n; ++j) {
        current_statement__ = 281;
        stan::model::assign(output, (stan::math::square(tau) *
          stan::math::exp(((-2 *
            stan::math::square(
              stan::math::sin(((stan::math::pi() *
                (stan::model::rvalue(x, "x", stan::model::index_uni(i)) -
                stan::model::rvalue(x, "x", stan::model::index_uni(j)))) /
                period)))) / stan::math::square(ell)))),
          "assigning variable output", stan::model::index_uni(i),
          stan::model::index_uni(j));
        current_statement__ = 282;
        stan::model::assign(output,
          stan::model::rvalue(output, "output", stan::model::index_uni(i),
            stan::model::index_uni(j)), "assigning variable output",
          stan::model::index_uni(j), stan::model::index_uni(i));
      }
      current_statement__ = 285;
      stan::model::assign(output, stan::math::square(tau),
        "assigning variable output", stan::model::index_uni(i),
        stan::model::index_uni(i));
    }
    current_statement__ = 288;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>,-1,-1>
cov_quasi_periodic(const std::vector<T0__>& x, const T1__& tau, const T2__&
                   ell, const T3__& ell_decay, const T4__& period,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 290;
    n = stan::math::size(x);
    current_statement__ = 291;
    stan::math::validate_non_negative_index("output", "n", n);
    current_statement__ = 292;
    stan::math::validate_non_negative_index("output", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,-1> output =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n, n, DUMMY_VAR__);
    current_statement__ = 293;
    stan::model::assign(output,
      stan::math::gp_exp_quad_cov(x, tau, ell_decay),
      "assigning variable output");
    current_statement__ = 299;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 297;
      for (int j = (i + 1); j <= n; ++j) {
        current_statement__ = 294;
        stan::model::assign(output,
          (stan::model::rvalue(output, "output", stan::model::index_uni(i),
             stan::model::index_uni(j)) *
          stan::math::exp(((-2 *
            stan::math::square(
              stan::math::sin(((stan::math::pi() *
                (stan::model::rvalue(x, "x", stan::model::index_uni(i)) -
                stan::model::rvalue(x, "x", stan::model::index_uni(j)))) /
                period)))) / stan::math::square(ell)))),
          "assigning variable output", stan::model::index_uni(i),
          stan::model::index_uni(j));
        current_statement__ = 295;
        stan::model::assign(output,
          stan::model::rvalue(output, "output", stan::model::index_uni(i),
            stan::model::index_uni(j)), "assigning variable output",
          stan::model::index_uni(j), stan::model::index_uni(i));
      }
    }
    current_statement__ = 300;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
chol_solve_L_b(const T0__& L_arg__, const T1__& b_arg__, std::ostream*
               pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& L = stan::math::to_ref(L_arg__);
  const auto& b = stan::math::to_ref(b_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 302;
    return stan::math::transpose(
             stan::math::mdivide_right_tri_low(
               stan::math::transpose(stan::math::mdivide_left_tri_low(L, b)),
               L));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
kronecker_product_sym(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  const auto& B = stan::math::to_ref(B_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_a = std::numeric_limits<int>::min();
    current_statement__ = 304;
    n_a = stan::math::rows(A);
    int n_b = std::numeric_limits<int>::min();
    current_statement__ = 305;
    n_b = stan::math::rows(B);
    current_statement__ = 306;
    stan::math::validate_non_negative_index("output", "n_a * n_b", (n_a *
      n_b));
    current_statement__ = 307;
    stan::math::validate_non_negative_index("output", "n_a * n_b", (n_a *
      n_b));
    Eigen::Matrix<local_scalar_t__,-1,-1> output =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((n_a * n_b), (n_a *
        n_b), DUMMY_VAR__);
    current_statement__ = 317;
    for (int col_A = 1; col_A <= n_a; ++col_A) {
      current_statement__ = 315;
      for (int row_A = col_A; row_A <= n_a; ++row_A) {
        current_statement__ = 309;
        stan::math::validate_non_negative_index("output_block", "n_b", n_b);
        current_statement__ = 310;
        stan::math::validate_non_negative_index("output_block", "n_b", n_b);
        Eigen::Matrix<local_scalar_t__,-1,-1> output_block =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_b, n_b,
            DUMMY_VAR__);
        current_statement__ = 311;
        stan::model::assign(output_block,
          stan::math::multiply(
            stan::model::rvalue(A, "A", stan::model::index_uni(row_A),
              stan::model::index_uni(col_A)), B),
          "assigning variable output_block");
        current_statement__ = 312;
        stan::model::assign(output, output_block,
          "assigning variable output",
          stan::model::index_min_max((((col_A - 1) * n_b) + 1), (col_A * n_b)),
          stan::model::index_min_max((((row_A - 1) * n_b) + 1), (row_A * n_b)));
        current_statement__ = 313;
        stan::model::assign(output, output_block,
          "assigning variable output",
          stan::model::index_min_max((((row_A - 1) * n_b) + 1), (row_A * n_b)),
          stan::model::index_min_max((((col_A - 1) * n_b) + 1), (col_A * n_b)));
      }
    }
    current_statement__ = 318;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
compose_covariance(const T0__& sigma_arg__, const T1__& L_arg__,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& L = stan::math::to_ref(L_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 320;
    return stan::math::quad_form_diag(
             stan::math::multiply(L, stan::math::transpose(L)), sigma);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
get_block_start(const int& i, const std::vector<int>& block_last_index,
                std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 326;
    if (stan::math::logical_eq(i, 1)) {
      current_statement__ = 324;
      return 1;
    } else {
      current_statement__ = 322;
      return (stan::model::rvalue(block_last_index, "block_last_index",
                stan::model::index_uni((i - 1)))
             + 1);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
get_n_block_max(const std::vector<int>& block_last_index, std::ostream*
                pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_blocks = std::numeric_limits<int>::min();
    current_statement__ = 328;
    N_blocks = stan::math::size(block_last_index);
    int current_block_start_d = std::numeric_limits<int>::min();
    current_statement__ = 329;
    current_block_start_d = 1;
    int n_block_max = std::numeric_limits<int>::min();
    current_statement__ = 330;
    n_block_max = 0;
    current_statement__ = 337;
    for (int i = 1; i <= N_blocks; ++i) {
      int N_block_i = std::numeric_limits<int>::min();
      current_statement__ = 331;
      N_block_i = ((stan::model::rvalue(block_last_index, "block_last_index",
                      stan::model::index_uni(i))
        - current_block_start_d) + 1);
      current_statement__ = 334;
      if (stan::math::logical_gt(N_block_i, n_block_max)) {
        current_statement__ = 332;
        n_block_max = N_block_i;
      }
      current_statement__ = 335;
      current_block_start_d = (stan::model::rvalue(block_last_index,
                                 "block_last_index",
                                 stan::model::index_uni(i))
        + 1);
    }
    current_statement__ = 338;
    return n_block_max;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__, typename T19__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T17__>,
                              stan::is_stan_scalar<T18__>,
                              stan::is_stan_scalar<T19__>>*>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, T4__, T5__, T6__,
                stan::promote_args_t<T7__, T8__, T9__, T10__, T11__,
                  stan::promote_args_t<T12__, T13__, T14__, T15__, T16__,
                    stan::promote_args_t<T17__, T18__, T19__>>>>,-1,-1>
process_covariance(const std::vector<double>& x, const int& d,
                   const std::vector<Eigen::Matrix<T2__,-1,1>>&
                   exponential_sigma,
                   const std::vector<Eigen::Matrix<T3__,-1,-1>>&
                   exponential_L, const std::vector<T4__>& exponential_ell,
                   const std::vector<Eigen::Matrix<T5__,-1,1>>&
                   matern32_sigma,
                   const std::vector<Eigen::Matrix<T6__,-1,-1>>& matern32_L,
                   const std::vector<T7__>& matern32_ell,
                   const std::vector<Eigen::Matrix<T8__,-1,1>>&
                   matern52_sigma,
                   const std::vector<Eigen::Matrix<T9__,-1,-1>>& matern52_L,
                   const std::vector<T10__>& matern52_ell,
                   const std::vector<Eigen::Matrix<T11__,-1,1>>&
                   squared_exponential_sigma,
                   const std::vector<Eigen::Matrix<T12__,-1,-1>>&
                   squared_exponential_L, const std::vector<T13__>&
                   squared_exponential_ell,
                   const std::vector<Eigen::Matrix<T14__,-1,1>>&
                   quasi_periodic_sigma,
                   const std::vector<Eigen::Matrix<T15__,-1,-1>>&
                   quasi_periodic_L, const std::vector<T16__>&
                   quasi_periodic_ell_periodic, const std::vector<T17__>&
                   quasi_periodic_ell_decay,
                   const std::vector<Eigen::Matrix<T18__,-1,1>>&
                   white_noise_sigma,
                   const std::vector<Eigen::Matrix<T19__,-1,-1>>&
                   white_noise_L, const std::vector<double>&
                   exponential_length_dilation, const std::vector<double>&
                   matern32_length_dilation, const std::vector<double>&
                   matern52_length_dilation, const std::vector<double>&
                   squared_exponential_length_dilation,
                   const std::vector<double>& quasi_periodic_period,
                   const std::vector<double>& quasi_periodic_length_dilation,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T3__, T4__, T5__, T6__,
                             stan::promote_args_t<T7__, T8__, T9__, T10__,
                               T11__,
                               stan::promote_args_t<T12__, T13__, T14__,
                                 T15__, T16__,
                                 stan::promote_args_t<T17__, T18__, T19__>>>>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 340;
    n = stan::math::size(x);
    int n_stacked = std::numeric_limits<int>::min();
    current_statement__ = 341;
    n_stacked = (n * d);
    int n_exponential_kernels = std::numeric_limits<int>::min();
    current_statement__ = 342;
    n_exponential_kernels = stan::math::size(exponential_ell);
    int n_matern32_kernels = std::numeric_limits<int>::min();
    current_statement__ = 343;
    n_matern32_kernels = stan::math::size(matern32_ell);
    int n_matern52_kernels = std::numeric_limits<int>::min();
    current_statement__ = 344;
    n_matern52_kernels = stan::math::size(matern52_ell);
    int n_squared_exponential_kernels = std::numeric_limits<int>::min();
    current_statement__ = 345;
    n_squared_exponential_kernels = stan::math::size(squared_exponential_ell);
    int n_quasi_periodic_kernels = std::numeric_limits<int>::min();
    current_statement__ = 346;
    n_quasi_periodic_kernels = stan::math::size(quasi_periodic_ell_periodic);
    int n_white_noise_kernels = std::numeric_limits<int>::min();
    current_statement__ = 347;
    n_white_noise_kernels = stan::math::size(white_noise_sigma);
    current_statement__ = 348;
    stan::math::validate_non_negative_index("output", "n_stacked", n_stacked);
    current_statement__ = 349;
    stan::math::validate_non_negative_index("output", "n_stacked", n_stacked);
    Eigen::Matrix<local_scalar_t__,-1,-1> output =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_stacked, n_stacked,
        DUMMY_VAR__);
    current_statement__ = 350;
    stan::model::assign(output,
      stan::math::rep_matrix(0, n_stacked, n_stacked),
      "assigning variable output");
    current_statement__ = 351;
    stan::math::validate_non_negative_index("noise_Sigma", "d", d);
    current_statement__ = 352;
    stan::math::validate_non_negative_index("noise_Sigma", "d", d);
    Eigen::Matrix<local_scalar_t__,-1,-1> noise_Sigma =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__);
    current_statement__ = 358;
    if (stan::math::logical_gt(n_exponential_kernels, 0)) {
      current_statement__ = 356;
      for (int i = 1; i <= n_exponential_kernels; ++i) {
        current_statement__ = 354;
        stan::model::assign(output,
          stan::math::add(stan::model::deep_copy(output),
            kronecker_product_sym(
              compose_covariance(
                stan::model::rvalue(exponential_sigma, "exponential_sigma",
                  stan::model::index_uni(i)),
                stan::model::rvalue(exponential_L, "exponential_L",
                  stan::model::index_uni(i)), pstream__),
              stan::math::gp_exponential_cov(x, 1,
                (stan::model::rvalue(exponential_ell, "exponential_ell",
                   stan::model::index_uni(i)) /
                stan::model::rvalue(exponential_length_dilation,
                  "exponential_length_dilation", stan::model::index_uni(i)))),
              pstream__)), "assigning variable output");
      }
    }
    current_statement__ = 363;
    if (stan::math::logical_gt(n_matern32_kernels, 0)) {
      current_statement__ = 361;
      for (int i = 1; i <= n_matern32_kernels; ++i) {
        current_statement__ = 359;
        stan::model::assign(output,
          stan::math::add(stan::model::deep_copy(output),
            kronecker_product_sym(
              compose_covariance(
                stan::model::rvalue(matern32_sigma, "matern32_sigma",
                  stan::model::index_uni(i)),
                stan::model::rvalue(matern32_L, "matern32_L",
                  stan::model::index_uni(i)), pstream__),
              stan::math::gp_matern32_cov(x, 1,
                (stan::model::rvalue(matern32_ell, "matern32_ell",
                   stan::model::index_uni(i)) /
                stan::model::rvalue(matern32_length_dilation,
                  "matern32_length_dilation", stan::model::index_uni(i)))),
              pstream__)), "assigning variable output");
      }
    }
    current_statement__ = 368;
    if (stan::math::logical_gt(n_matern52_kernels, 0)) {
      current_statement__ = 366;
      for (int i = 1; i <= n_matern52_kernels; ++i) {
        current_statement__ = 364;
        stan::model::assign(output,
          stan::math::add(stan::model::deep_copy(output),
            kronecker_product_sym(
              compose_covariance(
                stan::model::rvalue(matern52_sigma, "matern52_sigma",
                  stan::model::index_uni(i)),
                stan::model::rvalue(matern52_L, "matern52_L",
                  stan::model::index_uni(i)), pstream__),
              stan::math::gp_matern52_cov(x, 1,
                (stan::model::rvalue(matern52_ell, "matern52_ell",
                   stan::model::index_uni(i)) /
                stan::model::rvalue(matern52_length_dilation,
                  "matern52_length_dilation", stan::model::index_uni(i)))),
              pstream__)), "assigning variable output");
      }
    }
    current_statement__ = 373;
    if (stan::math::logical_gt(n_squared_exponential_kernels, 0)) {
      current_statement__ = 371;
      for (int i = 1; i <= n_squared_exponential_kernels; ++i) {
        current_statement__ = 369;
        stan::model::assign(output,
          stan::math::add(stan::model::deep_copy(output),
            kronecker_product_sym(
              compose_covariance(
                stan::model::rvalue(squared_exponential_sigma,
                  "squared_exponential_sigma", stan::model::index_uni(i)),
                stan::model::rvalue(squared_exponential_L,
                  "squared_exponential_L", stan::model::index_uni(i)),
                pstream__),
              stan::math::gp_exp_quad_cov(x, 1,
                (stan::model::rvalue(squared_exponential_ell,
                   "squared_exponential_ell", stan::model::index_uni(i)) /
                stan::model::rvalue(squared_exponential_length_dilation,
                  "squared_exponential_length_dilation",
                  stan::model::index_uni(i)))), pstream__)),
          "assigning variable output");
      }
    }
    current_statement__ = 378;
    if (stan::math::logical_gt(n_quasi_periodic_kernels, 0)) {
      current_statement__ = 376;
      for (int i = 1; i <= n_quasi_periodic_kernels; ++i) {
        current_statement__ = 374;
        stan::model::assign(output,
          stan::math::add(stan::model::deep_copy(output),
            kronecker_product_sym(
              compose_covariance(
                stan::model::rvalue(quasi_periodic_sigma,
                  "quasi_periodic_sigma", stan::model::index_uni(i)),
                stan::model::rvalue(quasi_periodic_L, "quasi_periodic_L",
                  stan::model::index_uni(i)), pstream__),
              cov_quasi_periodic(x, static_cast<double>(1),
                stan::model::rvalue(quasi_periodic_ell_periodic,
                  "quasi_periodic_ell_periodic", stan::model::index_uni(i)),
                (stan::model::rvalue(quasi_periodic_ell_decay,
                   "quasi_periodic_ell_decay", stan::model::index_uni(i)) /
                stan::model::rvalue(quasi_periodic_length_dilation,
                  "quasi_periodic_length_dilation", stan::model::index_uni(i))),
                stan::model::rvalue(quasi_periodic_period,
                  "quasi_periodic_period", stan::model::index_uni(i)),
                pstream__), pstream__)), "assigning variable output");
      }
    }
    current_statement__ = 390;
    if (stan::math::logical_gt(n_white_noise_kernels, 0)) {
      current_statement__ = 388;
      for (int i = 1; i <= n_white_noise_kernels; ++i) {
        current_statement__ = 379;
        stan::model::assign(noise_Sigma,
          compose_covariance(
            stan::model::rvalue(white_noise_sigma, "white_noise_sigma",
              stan::model::index_uni(i)),
            stan::model::rvalue(white_noise_L, "white_noise_L",
              stan::model::index_uni(i)), pstream__),
          "assigning variable noise_Sigma");
        current_statement__ = 386;
        for (int row_d = 1; row_d <= d; ++row_d) {
          current_statement__ = 384;
          for (int col_d = 1; col_d <= d; ++col_d) {
            current_statement__ = 382;
            for (int j = 1; j <= n; ++j) {
              current_statement__ = 380;
              stan::model::assign(output,
                (stan::model::rvalue(output, "output",
                   stan::model::index_uni((((row_d - 1) * n) + j)),
                   stan::model::index_uni((((col_d - 1) * n) + j))) +
                stan::model::rvalue(noise_Sigma, "noise_Sigma",
                  stan::model::index_uni(row_d),
                  stan::model::index_uni(col_d))),
                "assigning variable output",
                stan::model::index_uni((((row_d - 1) * n) + j)),
                stan::model::index_uni((((col_d - 1) * n) + j)));
            }
          }
        }
      }
    }
    current_statement__ = 391;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__, typename T19__, typename T22__, typename T23__,
          typename T24__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T17__>,
                              stan::is_stan_scalar<T18__>,
                              stan::is_stan_scalar<T19__>,
                              stan::is_col_vector<T22__>,
                              stan::is_vt_not_complex<T22__>,
                              stan::is_col_vector<T23__>,
                              stan::is_vt_not_complex<T23__>,
                              stan::is_eigen_matrix_dynamic<T24__>,
                              stan::is_vt_not_complex<T24__>>*>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, T4__, T5__, T6__,
                stan::promote_args_t<T7__, T8__, T9__, T10__, T11__,
                  stan::promote_args_t<T12__, T13__, T14__, T15__, T16__,
                    stan::promote_args_t<T17__, T18__, T19__,
                      stan::base_type_t<T22__>, stan::base_type_t<T23__>,
                      stan::promote_args_t<stan::base_type_t<T24__>>>>>>,-1,1>
vecchia_partial_sums(const int& start, const int& end,
                     const std::vector<Eigen::Matrix<T2__,-1,1>>&
                     exponential_sigma,
                     const std::vector<Eigen::Matrix<T3__,-1,-1>>&
                     exponential_L, const std::vector<T4__>& exponential_ell,
                     const std::vector<Eigen::Matrix<T5__,-1,1>>&
                     matern32_sigma,
                     const std::vector<Eigen::Matrix<T6__,-1,-1>>&
                     matern32_L, const std::vector<T7__>& matern32_ell,
                     const std::vector<Eigen::Matrix<T8__,-1,1>>&
                     matern52_sigma,
                     const std::vector<Eigen::Matrix<T9__,-1,-1>>&
                     matern52_L, const std::vector<T10__>& matern52_ell,
                     const std::vector<Eigen::Matrix<T11__,-1,1>>&
                     squared_exponential_sigma,
                     const std::vector<Eigen::Matrix<T12__,-1,-1>>&
                     squared_exponential_L, const std::vector<T13__>&
                     squared_exponential_ell,
                     const std::vector<Eigen::Matrix<T14__,-1,1>>&
                     quasi_periodic_sigma,
                     const std::vector<Eigen::Matrix<T15__,-1,-1>>&
                     quasi_periodic_L, const std::vector<T16__>&
                     quasi_periodic_ell_periodic, const std::vector<T17__>&
                     quasi_periodic_ell_decay,
                     const std::vector<Eigen::Matrix<T18__,-1,1>>&
                     white_noise_sigma,
                     const std::vector<Eigen::Matrix<T19__,-1,-1>>&
                     white_noise_L, const std::vector<double>& x, const int&
                     d, const T22__& y_stacked_arg__, const T23__&
                     y_stacked_tilde_arg__, const T24__& X_stacked_arg__,
                     const std::vector<double>& exponential_length_dilation,
                     const std::vector<double>& matern32_length_dilation,
                     const std::vector<double>& matern52_length_dilation,
                     const std::vector<double>&
                     squared_exponential_length_dilation,
                     const std::vector<double>& quasi_periodic_period,
                     const std::vector<double>&
                     quasi_periodic_length_dilation, const std::vector<int>&
                     block_indices, const std::vector<int>& block_last_index,
                     const std::vector<int>& block_n_responses,
                     const std::vector<int>& block_kernel_group,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T3__, T4__, T5__, T6__,
                             stan::promote_args_t<T7__, T8__, T9__, T10__,
                               T11__,
                               stan::promote_args_t<T12__, T13__, T14__,
                                 T15__, T16__,
                                 stan::promote_args_t<T17__, T18__, T19__,
                                   stan::base_type_t<T22__>,
                                   stan::base_type_t<T23__>,
                                   stan::promote_args_t<stan::base_type_t<T24__>>>>>>;
  int current_statement__ = 0;
  const auto& y_stacked = stan::math::to_ref(y_stacked_arg__);
  const auto& y_stacked_tilde = stan::math::to_ref(y_stacked_tilde_arg__);
  const auto& X_stacked = stan::math::to_ref(X_stacked_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 393;
    n = stan::math::size(x);
    int p_stacked = std::numeric_limits<int>::min();
    current_statement__ = 394;
    p_stacked = stan::math::cols(X_stacked);
    int n_kernel_groups = std::numeric_limits<int>::min();
    current_statement__ = 395;
    n_kernel_groups = stan::math::max(
                        stan::model::rvalue(block_kernel_group,
                          "block_kernel_group",
                          stan::model::index_min_max(start, end)));
    current_statement__ = 396;
    stan::math::validate_non_negative_index("group_n_blocks",
      "n_kernel_groups", n_kernel_groups);
    std::vector<int> group_n_blocks =
      std::vector<int>(n_kernel_groups, std::numeric_limits<int>::min());
    current_statement__ = 397;
    stan::model::assign(group_n_blocks,
      stan::math::rep_array(0, n_kernel_groups),
      "assigning variable group_n_blocks");
    current_statement__ = 398;
    stan::math::validate_non_negative_index("group_block_size",
      "n_kernel_groups", n_kernel_groups);
    std::vector<int> group_block_size =
      std::vector<int>(n_kernel_groups, std::numeric_limits<int>::min());
    current_statement__ = 400;
    stan::math::validate_non_negative_index("group_blocks_processed",
      "n_kernel_groups", n_kernel_groups);
    std::vector<int> group_blocks_processed =
      std::vector<int>(n_kernel_groups, std::numeric_limits<int>::min());
    current_statement__ = 401;
    stan::model::assign(group_blocks_processed,
      stan::math::rep_array(0, n_kernel_groups),
      "assigning variable group_blocks_processed");
    current_statement__ = 402;
    stan::math::validate_non_negative_index("group_block_indices",
      "end - start + 1", ((end - start) + 1));
    std::vector<int> group_block_indices =
      std::vector<int>(((end - start) + 1), std::numeric_limits<int>::min());
    local_scalar_t__ log_det = DUMMY_VAR__;
    current_statement__ = 404;
    log_det = 0;
    local_scalar_t__ y_tildet_Q_y_tilde = DUMMY_VAR__;
    current_statement__ = 405;
    y_tildet_Q_y_tilde = 0;
    current_statement__ = 406;
    stan::math::validate_non_negative_index("Xt_Q_X", "p_stacked", p_stacked);
    current_statement__ = 407;
    stan::math::validate_non_negative_index("Xt_Q_X", "p_stacked", p_stacked);
    Eigen::Matrix<local_scalar_t__,-1,-1> Xt_Q_X =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p_stacked, p_stacked,
        DUMMY_VAR__);
    current_statement__ = 408;
    stan::model::assign(Xt_Q_X,
      stan::math::rep_matrix(0, p_stacked, p_stacked),
      "assigning variable Xt_Q_X");
    current_statement__ = 409;
    stan::math::validate_non_negative_index("Xt_Q_y", "p_stacked", p_stacked);
    Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_stacked, DUMMY_VAR__);
    current_statement__ = 410;
    stan::model::assign(Xt_Q_y, stan::math::rep_vector(0, p_stacked),
      "assigning variable Xt_Q_y");
    current_statement__ = 411;
    stan::math::validate_non_negative_index("Xt_Q_y_tilde", "p_stacked",
      p_stacked);
    Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y_tilde =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_stacked, DUMMY_VAR__);
    current_statement__ = 412;
    stan::model::assign(Xt_Q_y_tilde, stan::math::rep_vector(0, p_stacked),
      "assigning variable Xt_Q_y_tilde");
    current_statement__ = 416;
    for (int j = start; j <= end; ++j) {
      current_statement__ = 413;
      stan::model::assign(group_n_blocks,
        (stan::model::rvalue(group_n_blocks, "group_n_blocks",
           stan::model::index_uni(
             stan::model::rvalue(block_kernel_group, "block_kernel_group",
               stan::model::index_uni(j)))) + 1),
        "assigning variable group_n_blocks",
        stan::model::index_uni(
          stan::model::rvalue(block_kernel_group, "block_kernel_group",
            stan::model::index_uni(j))));
      current_statement__ = 414;
      stan::model::assign(group_block_size,
        ((stan::model::rvalue(block_last_index, "block_last_index",
            stan::model::index_uni(j)) -
        get_block_start(j, block_last_index, pstream__)) + 1),
        "assigning variable group_block_size",
        stan::model::index_uni(
          stan::model::rvalue(block_kernel_group, "block_kernel_group",
            stan::model::index_uni(j))));
    }
    current_statement__ = 425;
    for (int j = start; j <= end; ++j) {
      int group = std::numeric_limits<int>::min();
      current_statement__ = 417;
      group = stan::model::rvalue(block_kernel_group, "block_kernel_group",
                stan::model::index_uni(j));
      int group_start = std::numeric_limits<int>::min();
      current_statement__ = 418;
      group_start = 1;
      current_statement__ = 421;
      if (stan::math::logical_gt(group, 1)) {
        current_statement__ = 419;
        group_start = (stan::math::sum(
                         stan::model::rvalue(group_n_blocks,
                           "group_n_blocks",
                           stan::model::index_min_max(1, (group - 1))))
          + 1);
      }
      current_statement__ = 422;
      stan::model::assign(group_block_indices, j,
        "assigning variable group_block_indices",
        stan::model::index_uni((group_start +
          stan::model::rvalue(group_blocks_processed,
            "group_blocks_processed", stan::model::index_uni(group)))));
      current_statement__ = 423;
      stan::model::assign(group_blocks_processed,
        (stan::model::rvalue(group_blocks_processed,
           "group_blocks_processed", stan::model::index_uni(group)) + 1),
        "assigning variable group_blocks_processed",
        stan::model::index_uni(group));
    }
    current_statement__ = 482;
    for (int i = 1; i <= n_kernel_groups; ++i) {
      current_statement__ = 480;
      if (stan::math::logical_gt(
            stan::model::rvalue(group_n_blocks, "group_n_blocks",
              stan::model::index_uni(i)), 0)) {
        int current_block_size = std::numeric_limits<int>::min();
        current_statement__ = 426;
        current_block_size = stan::model::rvalue(group_block_size,
                               "group_block_size", stan::model::index_uni(i));
        int current_block_size_stacked = std::numeric_limits<int>::min();
        current_statement__ = 427;
        current_block_size_stacked = (d * current_block_size);
        int current_n_blocks = std::numeric_limits<int>::min();
        current_statement__ = 428;
        current_n_blocks = stan::model::rvalue(group_n_blocks,
                             "group_n_blocks", stan::model::index_uni(i));
        current_statement__ = 429;
        stan::math::validate_non_negative_index("K_group",
          "current_block_size_stacked", current_block_size_stacked);
        current_statement__ = 430;
        stan::math::validate_non_negative_index("K_group",
          "current_block_size_stacked", current_block_size_stacked);
        Eigen::Matrix<local_scalar_t__,-1,-1> K_group =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(current_block_size_stacked,
            current_block_size_stacked, DUMMY_VAR__);
        current_statement__ = 432;
        stan::math::validate_non_negative_index("L_group",
          "current_block_size_stacked", current_block_size_stacked);
        current_statement__ = 433;
        stan::math::validate_non_negative_index("L_group",
          "current_block_size_stacked", current_block_size_stacked);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_group =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(current_block_size_stacked,
            current_block_size_stacked, DUMMY_VAR__);
        current_statement__ = 435;
        stan::math::validate_non_negative_index("current_block_indices",
          "current_block_size", current_block_size);
        std::vector<int> current_block_indices =
          std::vector<int>(current_block_size,
            std::numeric_limits<int>::min());
        current_statement__ = 437;
        stan::math::validate_non_negative_index("Z_group",
          "current_block_size_stacked", current_block_size_stacked);
        current_statement__ = 438;
        stan::math::validate_non_negative_index("Z_group",
          "p_stacked * current_n_blocks + 2 * current_n_blocks", ((p_stacked
          * current_n_blocks) + (2 * current_n_blocks)));
        Eigen::Matrix<local_scalar_t__,-1,-1> Z_group =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(current_block_size_stacked,
            ((p_stacked * current_n_blocks) + (2 * current_n_blocks)),
            DUMMY_VAR__);
        current_statement__ = 440;
        stan::math::validate_non_negative_index("L_inv_Z_group",
          "current_block_size_stacked", current_block_size_stacked);
        current_statement__ = 441;
        stan::math::validate_non_negative_index("L_inv_Z_group",
          "p_stacked * current_n_blocks + 2 * current_n_blocks", ((p_stacked
          * current_n_blocks) + (2 * current_n_blocks)));
        Eigen::Matrix<local_scalar_t__,-1,-1> L_inv_Z_group =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(current_block_size_stacked,
            ((p_stacked * current_n_blocks) + (2 * current_n_blocks)),
            DUMMY_VAR__);
        current_statement__ = 457;
        for (int j = 1; j <=
             stan::model::rvalue(group_n_blocks, "group_n_blocks",
               stan::model::index_uni(i)); ++j) {
          int block_index = std::numeric_limits<int>::min();
          current_statement__ = 443;
          block_index = stan::model::rvalue(group_block_indices,
                          "group_block_indices",
                          stan::model::index_uni(
                            (stan::math::sum(
                               stan::model::rvalue(group_n_blocks,
                                 "group_n_blocks",
                                 stan::model::index_min_max(1, (i - 1)))) +
                            j)));
          int block_start = std::numeric_limits<int>::min();
          current_statement__ = 444;
          block_start = get_block_start(block_index, block_last_index,
                          pstream__);
          current_statement__ = 445;
          stan::math::validate_non_negative_index(
            "current_block_indices_stacked", "current_block_size_stacked",
            current_block_size_stacked);
          std::vector<int> current_block_indices_stacked =
            std::vector<int>(current_block_size_stacked,
              std::numeric_limits<int>::min());
          current_statement__ = 447;
          stan::model::assign(current_block_indices,
            stan::model::rvalue(block_indices, "block_indices",
              stan::model::index_min_max(block_start,
                stan::model::rvalue(block_last_index, "block_last_index",
                  stan::model::index_uni(block_index)))),
            "assigning variable current_block_indices");
          current_statement__ = 452;
          for (int k = 1; k <= d; ++k) {
            current_statement__ = 450;
            for (int l = 1; l <= current_block_size; ++l) {
              current_statement__ = 448;
              stan::model::assign(current_block_indices_stacked, (((k - 1) *
                n) +
                stan::model::rvalue(current_block_indices,
                  "current_block_indices", stan::model::index_uni(l))),
                "assigning variable current_block_indices_stacked",
                stan::model::index_uni((((k - 1) * current_block_size) + l)));
            }
          }
          current_statement__ = 453;
          stan::model::assign(Z_group,
            stan::model::rvalue(X_stacked, "X_stacked",
              stan::model::index_multi(current_block_indices_stacked),
              stan::model::index_omni()), "assigning variable Z_group",
            stan::model::index_omni(),
            stan::model::index_min_max((((j - 1) * p_stacked) + 1), (j *
              p_stacked)));
          current_statement__ = 454;
          stan::model::assign(Z_group,
            stan::model::rvalue(y_stacked, "y_stacked",
              stan::model::index_multi(current_block_indices_stacked)),
            "assigning variable Z_group", stan::model::index_omni(),
            stan::model::index_uni(((current_n_blocks * p_stacked) + j)));
          current_statement__ = 455;
          stan::model::assign(Z_group,
            stan::model::rvalue(y_stacked_tilde, "y_stacked_tilde",
              stan::model::index_multi(current_block_indices_stacked)),
            "assigning variable Z_group", stan::model::index_omni(),
            stan::model::index_uni((((current_n_blocks * p_stacked) +
              current_n_blocks) + j)));
        }
        current_statement__ = 458;
        stan::model::assign(K_group,
          process_covariance(
            stan::model::rvalue(x, "x",
              stan::model::index_multi(current_block_indices)), d,
            exponential_sigma, exponential_L, exponential_ell,
            matern32_sigma, matern32_L, matern32_ell, matern52_sigma,
            matern52_L, matern52_ell, squared_exponential_sigma,
            squared_exponential_L, squared_exponential_ell,
            quasi_periodic_sigma, quasi_periodic_L,
            quasi_periodic_ell_periodic, quasi_periodic_ell_decay,
            white_noise_sigma, white_noise_L, exponential_length_dilation,
            matern32_length_dilation, matern52_length_dilation,
            squared_exponential_length_dilation, quasi_periodic_period,
            quasi_periodic_length_dilation, pstream__),
          "assigning variable K_group");
        current_statement__ = 459;
        stan::model::assign(L_group, stan::math::cholesky_decompose(K_group),
          "assigning variable L_group");
        current_statement__ = 460;
        stan::model::assign(L_inv_Z_group,
          stan::math::mdivide_left_tri_low(L_group, Z_group),
          "assigning variable L_inv_Z_group");
        current_statement__ = 478;
        for (int j = 1; j <=
             stan::model::rvalue(group_n_blocks, "group_n_blocks",
               stan::model::index_uni(i)); ++j) {
          int block_index = std::numeric_limits<int>::min();
          current_statement__ = 461;
          block_index = stan::model::rvalue(group_block_indices,
                          "group_block_indices",
                          stan::model::index_uni(
                            (stan::math::sum(
                               stan::model::rvalue(group_n_blocks,
                                 "group_n_blocks",
                                 stan::model::index_min_max(1, (i - 1)))) +
                            j)));
          int block_start = std::numeric_limits<int>::min();
          current_statement__ = 462;
          block_start = get_block_start(block_index, block_last_index,
                          pstream__);
          int n_parents_current_block = std::numeric_limits<int>::min();
          current_statement__ = 463;
          n_parents_current_block = (current_block_size -
            stan::model::rvalue(block_n_responses, "block_n_responses",
              stan::model::index_uni(block_index)));
          current_statement__ = 464;
          stan::math::validate_non_negative_index(
            "response_rows_current_block_stacked",
            "d * block_n_responses[block_index]", (d *
            stan::model::rvalue(block_n_responses, "block_n_responses",
              stan::model::index_uni(block_index))));
          std::vector<int> response_rows_current_block_stacked =
            std::vector<int>((d *
              stan::model::rvalue(block_n_responses, "block_n_responses",
                stan::model::index_uni(block_index))),
              std::numeric_limits<int>::min());
          current_statement__ = 466;
          stan::model::assign(current_block_indices,
            stan::model::rvalue(block_indices, "block_indices",
              stan::model::index_min_max(block_start,
                stan::model::rvalue(block_last_index, "block_last_index",
                  stan::model::index_uni(block_index)))),
            "assigning variable current_block_indices");
          current_statement__ = 471;
          for (int k = 1; k <= d; ++k) {
            current_statement__ = 469;
            for (int l = 1; l <=
                 stan::model::rvalue(block_n_responses, "block_n_responses",
                   stan::model::index_uni(block_index)); ++l) {
              current_statement__ = 467;
              stan::model::assign(response_rows_current_block_stacked, ((((k
                - 1) * current_block_size) + n_parents_current_block) + l),
                "assigning variable response_rows_current_block_stacked",
                stan::model::index_uni((((k - 1) *
                  stan::model::rvalue(block_n_responses, "block_n_responses",
                    stan::model::index_uni(block_index))) + l)));
            }
          }
          current_statement__ = 472;
          log_det = (log_det + (2 *
            stan::math::sum(
              stan::math::log(
                stan::math::diagonal(
                  stan::model::rvalue(L_group, "L_group",
                    stan::model::index_multi(
                      response_rows_current_block_stacked),
                    stan::model::index_multi(
                      response_rows_current_block_stacked)))))));
          current_statement__ = 473;
          y_tildet_Q_y_tilde = (y_tildet_Q_y_tilde +
            stan::math::sum(
              stan::math::square(
                stan::model::rvalue(L_inv_Z_group, "L_inv_Z_group",
                  stan::model::index_multi(
                    response_rows_current_block_stacked),
                  stan::model::index_uni((((current_n_blocks * p_stacked) +
                    current_n_blocks) + j))))));
          current_statement__ = 474;
          stan::model::assign(Xt_Q_y,
            stan::math::add(stan::model::deep_copy(Xt_Q_y),
              stan::math::multiply(
                stan::math::transpose(
                  stan::model::rvalue(L_inv_Z_group, "L_inv_Z_group",
                    stan::model::index_multi(
                      response_rows_current_block_stacked),
                    stan::model::index_min_max((((j - 1) * p_stacked) + 1),
                      (j * p_stacked)))),
                stan::model::rvalue(L_inv_Z_group, "L_inv_Z_group",
                  stan::model::index_multi(
                    response_rows_current_block_stacked),
                  stan::model::index_uni(((current_n_blocks * p_stacked) + j))))),
            "assigning variable Xt_Q_y");
          current_statement__ = 475;
          stan::model::assign(Xt_Q_y_tilde,
            stan::math::add(stan::model::deep_copy(Xt_Q_y_tilde),
              stan::math::multiply(
                stan::math::transpose(
                  stan::model::rvalue(L_inv_Z_group, "L_inv_Z_group",
                    stan::model::index_multi(
                      response_rows_current_block_stacked),
                    stan::model::index_min_max((((j - 1) * p_stacked) + 1),
                      (j * p_stacked)))),
                stan::model::rvalue(L_inv_Z_group, "L_inv_Z_group",
                  stan::model::index_multi(
                    response_rows_current_block_stacked),
                  stan::model::index_uni((((current_n_blocks * p_stacked) +
                    current_n_blocks) + j))))),
            "assigning variable Xt_Q_y_tilde");
          current_statement__ = 476;
          stan::model::assign(Xt_Q_X,
            stan::math::add(stan::model::deep_copy(Xt_Q_X),
              stan::math::crossprod(
                stan::model::rvalue(L_inv_Z_group, "L_inv_Z_group",
                  stan::model::index_multi(
                    response_rows_current_block_stacked),
                  stan::model::index_min_max((((j - 1) * p_stacked) + 1), (j
                    * p_stacked))))), "assigning variable Xt_Q_X");
        }
      }
    }
    current_statement__ = 483;
    stan::math::validate_non_negative_index("output",
      "2 + p_stacked * p_stacked + 2 * p_stacked", ((2 + (p_stacked *
      p_stacked)) + (2 * p_stacked)));
    Eigen::Matrix<local_scalar_t__,-1,1> output =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((2 + (p_stacked *
        p_stacked)) + (2 * p_stacked)), DUMMY_VAR__);
    current_statement__ = 485;
    stan::model::assign(output, log_det, "assigning variable output",
      stan::model::index_uni(1));
    current_statement__ = 486;
    stan::model::assign(output, y_tildet_Q_y_tilde,
      "assigning variable output", stan::model::index_uni(2));
    current_statement__ = 487;
    stan::model::assign(output, stan::math::to_vector(Xt_Q_X),
      "assigning variable output",
      stan::model::index_min_max(3, (2 + (p_stacked * p_stacked))));
    current_statement__ = 488;
    stan::model::assign(output, stan::math::to_vector(Xt_Q_y),
      "assigning variable output",
      stan::model::index_min_max((3 + (p_stacked * p_stacked)), ((2 +
        (p_stacked * p_stacked)) + p_stacked)));
    current_statement__ = 489;
    stan::model::assign(output, stan::math::to_vector(Xt_Q_y_tilde),
      "assigning variable output",
      stan::model::index_min(((3 + (p_stacked * p_stacked)) + p_stacked)));
    current_statement__ = 490;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_ptide final : public model_base_crtp<model_ptide> {
private:
  int n;
  int p;
  int d;
  std::vector<double> x;
  Eigen::Matrix<double,-1,-1> y_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,1> beta_prior_mean_data__;
  Eigen::Matrix<double,-1,-1> beta_prior_precision_data__;
  int n_exponential_kernels;
  std::vector<double> exponential_length_dilation;
  std::vector<double> exponential_sigma_squared_a;
  std::vector<double> exponential_sigma_squared_b;
  std::vector<double> exponential_L_shape;
  std::vector<double> exponential_ell_a;
  std::vector<double> exponential_ell_b;
  int n_matern32_kernels;
  std::vector<double> matern32_length_dilation;
  std::vector<double> matern32_sigma_squared_a;
  std::vector<double> matern32_sigma_squared_b;
  std::vector<double> matern32_L_shape;
  std::vector<double> matern32_ell_a;
  std::vector<double> matern32_ell_b;
  int n_matern52_kernels;
  std::vector<double> matern52_length_dilation;
  std::vector<double> matern52_sigma_squared_a;
  std::vector<double> matern52_sigma_squared_b;
  std::vector<double> matern52_L_shape;
  std::vector<double> matern52_ell_a;
  std::vector<double> matern52_ell_b;
  int n_squared_exponential_kernels;
  std::vector<double> squared_exponential_length_dilation;
  std::vector<double> squared_exponential_sigma_squared_a;
  std::vector<double> squared_exponential_sigma_squared_b;
  std::vector<double> squared_exponential_L_shape;
  std::vector<double> squared_exponential_ell_a;
  std::vector<double> squared_exponential_ell_b;
  int n_quasi_periodic_kernels;
  std::vector<double> quasi_periodic_period;
  std::vector<double> quasi_periodic_length_dilation;
  std::vector<double> quasi_periodic_sigma_squared_a;
  std::vector<double> quasi_periodic_sigma_squared_b;
  std::vector<double> quasi_periodic_L_shape;
  std::vector<double> quasi_periodic_ell_periodic_a;
  std::vector<double> quasi_periodic_ell_periodic_b;
  std::vector<double> quasi_periodic_ell_decay_a;
  std::vector<double> quasi_periodic_ell_decay_b;
  int n_white_noise_kernels;
  std::vector<double> white_noise_sigma_squared_a;
  std::vector<double> white_noise_sigma_squared_b;
  std::vector<double> white_noise_L_shape;
  int n_indices;
  int n_blocks;
  std::vector<int> block_indices;
  std::vector<int> block_last_index;
  std::vector<int> block_n_responses;
  std::vector<int> block_kernel_group;
  int use_parallel;
  int grain_size;
  int strategy;
  int n_block_max;
  int n_stacked;
  int p_stacked;
  Eigen::Matrix<double,-1,1> y_stacked_data__;
  Eigen::Matrix<double,-1,1> y_stacked_tilde_data__;
  Eigen::Matrix<double,-1,-1> X_stacked_data__;
  Eigen::Matrix<double,-1,-1> L_beta_prior_precision_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> y{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> beta_prior_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> beta_prior_precision{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_stacked{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_stacked_tilde{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_stacked{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>>
    L_beta_prior_precision{nullptr, 0, 0};
public:
  ~model_ptide() {}
  model_ptide(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ptide_namespace::model_ptide";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 117;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 117;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 118;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 118;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 118;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "d", "int",
        std::vector<size_t>{});
      d = std::numeric_limits<int>::min();
      current_statement__ = 119;
      d = context__.vals_i("d")[(1 - 1)];
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "d", d, 1);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("x", "n", n);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      x = std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 121;
      x = context__.vals_r("x");
      current_statement__ = 122;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("y", "d", d);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(d)});
      y_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, d,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,-1>>(y_data__.data(), n, d);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 124;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 124;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 124;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 125;
      stan::math::validate_non_negative_index("X", "n", n);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("X", "p", p);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(p)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, p,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), n, p);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 127;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 127;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 127;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 127;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 128;
      stan::math::validate_non_negative_index("beta_prior_mean", "p * d", (p
        * d));
      current_statement__ = 129;
      context__.validate_dims("data initialization", "beta_prior_mean",
        "double", std::vector<size_t>{static_cast<size_t>((p * d))});
      beta_prior_mean_data__ = Eigen::Matrix<double,-1,1>::Constant((p * d),
                                 std::numeric_limits<double>::quiet_NaN());
      new (&beta_prior_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(beta_prior_mean_data__.data(),
        (p * d));
      {
        std::vector<local_scalar_t__> beta_prior_mean_flat__;
        current_statement__ = 129;
        beta_prior_mean_flat__ = context__.vals_r("beta_prior_mean");
        current_statement__ = 129;
        pos__ = 1;
        current_statement__ = 129;
        for (int sym1__ = 1; sym1__ <= (p * d); ++sym1__) {
          current_statement__ = 129;
          stan::model::assign(beta_prior_mean, beta_prior_mean_flat__[(pos__
            - 1)], "assigning variable beta_prior_mean",
            stan::model::index_uni(sym1__));
          current_statement__ = 129;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 130;
      stan::math::validate_non_negative_index("beta_prior_precision",
        "p * d", (p * d));
      current_statement__ = 131;
      stan::math::validate_non_negative_index("beta_prior_precision",
        "p * d", (p * d));
      current_statement__ = 132;
      context__.validate_dims("data initialization", "beta_prior_precision",
        "double",
        std::vector<size_t>{static_cast<size_t>((p * d)),
          static_cast<size_t>((p * d))});
      beta_prior_precision_data__ = Eigen::Matrix<double,-1,-1>::Constant((p
                                      * d), (p * d),
                                      std::numeric_limits<double>::quiet_NaN());
      new (&beta_prior_precision)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(beta_prior_precision_data__.data(),
        (p * d), (p * d));
      {
        std::vector<local_scalar_t__> beta_prior_precision_flat__;
        current_statement__ = 132;
        beta_prior_precision_flat__ = context__.vals_r("beta_prior_precision");
        current_statement__ = 132;
        pos__ = 1;
        current_statement__ = 132;
        for (int sym1__ = 1; sym1__ <= (p * d); ++sym1__) {
          current_statement__ = 132;
          for (int sym2__ = 1; sym2__ <= (p * d); ++sym2__) {
            current_statement__ = 132;
            stan::model::assign(beta_prior_precision,
              beta_prior_precision_flat__[(pos__ - 1)],
              "assigning variable beta_prior_precision",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 132;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 133;
      context__.validate_dims("data initialization", "n_exponential_kernels",
        "int", std::vector<size_t>{});
      n_exponential_kernels = std::numeric_limits<int>::min();
      current_statement__ = 133;
      n_exponential_kernels = context__.vals_i("n_exponential_kernels")[(1 -
        1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "n_exponential_kernels",
        n_exponential_kernels, 0);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("exponential_length_dilation",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 135;
      context__.validate_dims("data initialization",
        "exponential_length_dilation", "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)});
      exponential_length_dilation = std::vector<double>(n_exponential_kernels,
                                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 135;
      exponential_length_dilation = context__.vals_r("exponential_length_dilation");
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__,
        "exponential_length_dilation", exponential_length_dilation, 0);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("exponential_sigma_squared_a",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 137;
      context__.validate_dims("data initialization",
        "exponential_sigma_squared_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)});
      exponential_sigma_squared_a = std::vector<double>(n_exponential_kernels,
                                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 137;
      exponential_sigma_squared_a = context__.vals_r("exponential_sigma_squared_a");
      current_statement__ = 137;
      stan::math::check_greater_or_equal(function__,
        "exponential_sigma_squared_a", exponential_sigma_squared_a, 0);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("exponential_sigma_squared_b",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 139;
      context__.validate_dims("data initialization",
        "exponential_sigma_squared_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)});
      exponential_sigma_squared_b = std::vector<double>(n_exponential_kernels,
                                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 139;
      exponential_sigma_squared_b = context__.vals_r("exponential_sigma_squared_b");
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__,
        "exponential_sigma_squared_b", exponential_sigma_squared_b, 0);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("exponential_L_shape",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 141;
      context__.validate_dims("data initialization", "exponential_L_shape",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)});
      exponential_L_shape = std::vector<double>(n_exponential_kernels,
                              std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 141;
      exponential_L_shape = context__.vals_r("exponential_L_shape");
      current_statement__ = 141;
      stan::math::check_greater_or_equal(function__, "exponential_L_shape",
        exponential_L_shape, 0);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("exponential_ell_a",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 143;
      context__.validate_dims("data initialization", "exponential_ell_a",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)});
      exponential_ell_a = std::vector<double>(n_exponential_kernels,
                            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 143;
      exponential_ell_a = context__.vals_r("exponential_ell_a");
      current_statement__ = 143;
      stan::math::check_greater_or_equal(function__, "exponential_ell_a",
        exponential_ell_a, 0);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("exponential_ell_b",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 145;
      context__.validate_dims("data initialization", "exponential_ell_b",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)});
      exponential_ell_b = std::vector<double>(n_exponential_kernels,
                            std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 145;
      exponential_ell_b = context__.vals_r("exponential_ell_b");
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "exponential_ell_b",
        exponential_ell_b, 0);
      current_statement__ = 146;
      context__.validate_dims("data initialization", "n_matern32_kernels",
        "int", std::vector<size_t>{});
      n_matern32_kernels = std::numeric_limits<int>::min();
      current_statement__ = 146;
      n_matern32_kernels = context__.vals_i("n_matern32_kernels")[(1 - 1)];
      current_statement__ = 146;
      stan::math::check_greater_or_equal(function__, "n_matern32_kernels",
        n_matern32_kernels, 0);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("matern32_length_dilation",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 148;
      context__.validate_dims("data initialization",
        "matern32_length_dilation", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)});
      matern32_length_dilation = std::vector<double>(n_matern32_kernels,
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 148;
      matern32_length_dilation = context__.vals_r("matern32_length_dilation");
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__,
        "matern32_length_dilation", matern32_length_dilation, 0);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("matern32_sigma_squared_a",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 150;
      context__.validate_dims("data initialization",
        "matern32_sigma_squared_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)});
      matern32_sigma_squared_a = std::vector<double>(n_matern32_kernels,
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 150;
      matern32_sigma_squared_a = context__.vals_r("matern32_sigma_squared_a");
      current_statement__ = 150;
      stan::math::check_greater_or_equal(function__,
        "matern32_sigma_squared_a", matern32_sigma_squared_a, 0);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("matern32_sigma_squared_b",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 152;
      context__.validate_dims("data initialization",
        "matern32_sigma_squared_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)});
      matern32_sigma_squared_b = std::vector<double>(n_matern32_kernels,
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 152;
      matern32_sigma_squared_b = context__.vals_r("matern32_sigma_squared_b");
      current_statement__ = 152;
      stan::math::check_greater_or_equal(function__,
        "matern32_sigma_squared_b", matern32_sigma_squared_b, 0);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("matern32_L_shape",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 154;
      context__.validate_dims("data initialization", "matern32_L_shape",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)});
      matern32_L_shape = std::vector<double>(n_matern32_kernels,
                           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 154;
      matern32_L_shape = context__.vals_r("matern32_L_shape");
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "matern32_L_shape",
        matern32_L_shape, 0);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("matern32_ell_a",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 156;
      context__.validate_dims("data initialization", "matern32_ell_a",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)});
      matern32_ell_a = std::vector<double>(n_matern32_kernels,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 156;
      matern32_ell_a = context__.vals_r("matern32_ell_a");
      current_statement__ = 156;
      stan::math::check_greater_or_equal(function__, "matern32_ell_a",
        matern32_ell_a, 0);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("matern32_ell_b",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 158;
      context__.validate_dims("data initialization", "matern32_ell_b",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)});
      matern32_ell_b = std::vector<double>(n_matern32_kernels,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 158;
      matern32_ell_b = context__.vals_r("matern32_ell_b");
      current_statement__ = 158;
      stan::math::check_greater_or_equal(function__, "matern32_ell_b",
        matern32_ell_b, 0);
      current_statement__ = 159;
      context__.validate_dims("data initialization", "n_matern52_kernels",
        "int", std::vector<size_t>{});
      n_matern52_kernels = std::numeric_limits<int>::min();
      current_statement__ = 159;
      n_matern52_kernels = context__.vals_i("n_matern52_kernels")[(1 - 1)];
      current_statement__ = 159;
      stan::math::check_greater_or_equal(function__, "n_matern52_kernels",
        n_matern52_kernels, 0);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("matern52_length_dilation",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 161;
      context__.validate_dims("data initialization",
        "matern52_length_dilation", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)});
      matern52_length_dilation = std::vector<double>(n_matern52_kernels,
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 161;
      matern52_length_dilation = context__.vals_r("matern52_length_dilation");
      current_statement__ = 161;
      stan::math::check_greater_or_equal(function__,
        "matern52_length_dilation", matern52_length_dilation, 0);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("matern52_sigma_squared_a",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 163;
      context__.validate_dims("data initialization",
        "matern52_sigma_squared_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)});
      matern52_sigma_squared_a = std::vector<double>(n_matern52_kernels,
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 163;
      matern52_sigma_squared_a = context__.vals_r("matern52_sigma_squared_a");
      current_statement__ = 163;
      stan::math::check_greater_or_equal(function__,
        "matern52_sigma_squared_a", matern52_sigma_squared_a, 0);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("matern52_sigma_squared_b",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 165;
      context__.validate_dims("data initialization",
        "matern52_sigma_squared_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)});
      matern52_sigma_squared_b = std::vector<double>(n_matern52_kernels,
                                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 165;
      matern52_sigma_squared_b = context__.vals_r("matern52_sigma_squared_b");
      current_statement__ = 165;
      stan::math::check_greater_or_equal(function__,
        "matern52_sigma_squared_b", matern52_sigma_squared_b, 0);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("matern52_L_shape",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 167;
      context__.validate_dims("data initialization", "matern52_L_shape",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)});
      matern52_L_shape = std::vector<double>(n_matern52_kernels,
                           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 167;
      matern52_L_shape = context__.vals_r("matern52_L_shape");
      current_statement__ = 167;
      stan::math::check_greater_or_equal(function__, "matern52_L_shape",
        matern52_L_shape, 0);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("matern52_ell_a",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 169;
      context__.validate_dims("data initialization", "matern52_ell_a",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)});
      matern52_ell_a = std::vector<double>(n_matern52_kernels,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 169;
      matern52_ell_a = context__.vals_r("matern52_ell_a");
      current_statement__ = 169;
      stan::math::check_greater_or_equal(function__, "matern52_ell_a",
        matern52_ell_a, 0);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("matern52_ell_b",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 171;
      context__.validate_dims("data initialization", "matern52_ell_b",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)});
      matern52_ell_b = std::vector<double>(n_matern52_kernels,
                         std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 171;
      matern52_ell_b = context__.vals_r("matern52_ell_b");
      current_statement__ = 171;
      stan::math::check_greater_or_equal(function__, "matern52_ell_b",
        matern52_ell_b, 0);
      current_statement__ = 172;
      context__.validate_dims("data initialization",
        "n_squared_exponential_kernels", "int", std::vector<size_t>{});
      n_squared_exponential_kernels = std::numeric_limits<int>::min();
      current_statement__ = 172;
      n_squared_exponential_kernels = context__.vals_i("n_squared_exponential_kernels")[(1
        - 1)];
      current_statement__ = 172;
      stan::math::check_greater_or_equal(function__,
        "n_squared_exponential_kernels", n_squared_exponential_kernels, 0);
      current_statement__ = 173;
      stan::math::validate_non_negative_index(
        "squared_exponential_length_dilation",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 174;
      context__.validate_dims("data initialization",
        "squared_exponential_length_dilation", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels)});
      squared_exponential_length_dilation = std::vector<double>(n_squared_exponential_kernels,
                                              std::numeric_limits<double>::quiet_NaN(
                                                ));
      current_statement__ = 174;
      squared_exponential_length_dilation = context__.vals_r("squared_exponential_length_dilation");
      current_statement__ = 174;
      stan::math::check_greater_or_equal(function__,
        "squared_exponential_length_dilation",
        squared_exponential_length_dilation, 0);
      current_statement__ = 175;
      stan::math::validate_non_negative_index(
        "squared_exponential_sigma_squared_a",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 176;
      context__.validate_dims("data initialization",
        "squared_exponential_sigma_squared_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels)});
      squared_exponential_sigma_squared_a = std::vector<double>(n_squared_exponential_kernels,
                                              std::numeric_limits<double>::quiet_NaN(
                                                ));
      current_statement__ = 176;
      squared_exponential_sigma_squared_a = context__.vals_r("squared_exponential_sigma_squared_a");
      current_statement__ = 176;
      stan::math::check_greater_or_equal(function__,
        "squared_exponential_sigma_squared_a",
        squared_exponential_sigma_squared_a, 0);
      current_statement__ = 177;
      stan::math::validate_non_negative_index(
        "squared_exponential_sigma_squared_b",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 178;
      context__.validate_dims("data initialization",
        "squared_exponential_sigma_squared_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels)});
      squared_exponential_sigma_squared_b = std::vector<double>(n_squared_exponential_kernels,
                                              std::numeric_limits<double>::quiet_NaN(
                                                ));
      current_statement__ = 178;
      squared_exponential_sigma_squared_b = context__.vals_r("squared_exponential_sigma_squared_b");
      current_statement__ = 178;
      stan::math::check_greater_or_equal(function__,
        "squared_exponential_sigma_squared_b",
        squared_exponential_sigma_squared_b, 0);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("squared_exponential_L_shape",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 180;
      context__.validate_dims("data initialization",
        "squared_exponential_L_shape", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels)});
      squared_exponential_L_shape = std::vector<double>(n_squared_exponential_kernels,
                                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 180;
      squared_exponential_L_shape = context__.vals_r("squared_exponential_L_shape");
      current_statement__ = 180;
      stan::math::check_greater_or_equal(function__,
        "squared_exponential_L_shape", squared_exponential_L_shape, 0);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("squared_exponential_ell_a",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 182;
      context__.validate_dims("data initialization",
        "squared_exponential_ell_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels)});
      squared_exponential_ell_a = std::vector<double>(n_squared_exponential_kernels,
                                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 182;
      squared_exponential_ell_a = context__.vals_r("squared_exponential_ell_a");
      current_statement__ = 182;
      stan::math::check_greater_or_equal(function__,
        "squared_exponential_ell_a", squared_exponential_ell_a, 0);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("squared_exponential_ell_b",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 184;
      context__.validate_dims("data initialization",
        "squared_exponential_ell_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels)});
      squared_exponential_ell_b = std::vector<double>(n_squared_exponential_kernels,
                                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 184;
      squared_exponential_ell_b = context__.vals_r("squared_exponential_ell_b");
      current_statement__ = 184;
      stan::math::check_greater_or_equal(function__,
        "squared_exponential_ell_b", squared_exponential_ell_b, 0);
      current_statement__ = 185;
      context__.validate_dims("data initialization",
        "n_quasi_periodic_kernels", "int", std::vector<size_t>{});
      n_quasi_periodic_kernels = std::numeric_limits<int>::min();
      current_statement__ = 185;
      n_quasi_periodic_kernels = context__.vals_i("n_quasi_periodic_kernels")[(1
        - 1)];
      current_statement__ = 185;
      stan::math::check_greater_or_equal(function__,
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels, 0);
      current_statement__ = 186;
      stan::math::validate_non_negative_index("quasi_periodic_period",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 187;
      context__.validate_dims("data initialization", "quasi_periodic_period",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_period = std::vector<double>(n_quasi_periodic_kernels,
                                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 187;
      quasi_periodic_period = context__.vals_r("quasi_periodic_period");
      current_statement__ = 187;
      stan::math::check_greater_or_equal(function__, "quasi_periodic_period",
        quasi_periodic_period, 0);
      current_statement__ = 188;
      stan::math::validate_non_negative_index(
        "quasi_periodic_length_dilation", "n_quasi_periodic_kernels",
        n_quasi_periodic_kernels);
      current_statement__ = 189;
      context__.validate_dims("data initialization",
        "quasi_periodic_length_dilation", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_length_dilation = std::vector<double>(n_quasi_periodic_kernels,
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      current_statement__ = 189;
      quasi_periodic_length_dilation = context__.vals_r("quasi_periodic_length_dilation");
      current_statement__ = 189;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_length_dilation", quasi_periodic_length_dilation, 0);
      current_statement__ = 190;
      stan::math::validate_non_negative_index(
        "quasi_periodic_sigma_squared_a", "n_quasi_periodic_kernels",
        n_quasi_periodic_kernels);
      current_statement__ = 191;
      context__.validate_dims("data initialization",
        "quasi_periodic_sigma_squared_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_sigma_squared_a = std::vector<double>(n_quasi_periodic_kernels,
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      current_statement__ = 191;
      quasi_periodic_sigma_squared_a = context__.vals_r("quasi_periodic_sigma_squared_a");
      current_statement__ = 191;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_sigma_squared_a", quasi_periodic_sigma_squared_a, 0);
      current_statement__ = 192;
      stan::math::validate_non_negative_index(
        "quasi_periodic_sigma_squared_b", "n_quasi_periodic_kernels",
        n_quasi_periodic_kernels);
      current_statement__ = 193;
      context__.validate_dims("data initialization",
        "quasi_periodic_sigma_squared_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_sigma_squared_b = std::vector<double>(n_quasi_periodic_kernels,
                                         std::numeric_limits<double>::quiet_NaN(
                                           ));
      current_statement__ = 193;
      quasi_periodic_sigma_squared_b = context__.vals_r("quasi_periodic_sigma_squared_b");
      current_statement__ = 193;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_sigma_squared_b", quasi_periodic_sigma_squared_b, 0);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("quasi_periodic_L_shape",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 195;
      context__.validate_dims("data initialization",
        "quasi_periodic_L_shape", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_L_shape = std::vector<double>(n_quasi_periodic_kernels,
                                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 195;
      quasi_periodic_L_shape = context__.vals_r("quasi_periodic_L_shape");
      current_statement__ = 195;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_L_shape", quasi_periodic_L_shape, 0);
      current_statement__ = 196;
      stan::math::validate_non_negative_index(
        "quasi_periodic_ell_periodic_a", "n_quasi_periodic_kernels",
        n_quasi_periodic_kernels);
      current_statement__ = 197;
      context__.validate_dims("data initialization",
        "quasi_periodic_ell_periodic_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_ell_periodic_a = std::vector<double>(n_quasi_periodic_kernels,
                                        std::numeric_limits<double>::quiet_NaN(
                                          ));
      current_statement__ = 197;
      quasi_periodic_ell_periodic_a = context__.vals_r("quasi_periodic_ell_periodic_a");
      current_statement__ = 197;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_ell_periodic_a", quasi_periodic_ell_periodic_a, 0);
      current_statement__ = 198;
      stan::math::validate_non_negative_index(
        "quasi_periodic_ell_periodic_b", "n_quasi_periodic_kernels",
        n_quasi_periodic_kernels);
      current_statement__ = 199;
      context__.validate_dims("data initialization",
        "quasi_periodic_ell_periodic_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_ell_periodic_b = std::vector<double>(n_quasi_periodic_kernels,
                                        std::numeric_limits<double>::quiet_NaN(
                                          ));
      current_statement__ = 199;
      quasi_periodic_ell_periodic_b = context__.vals_r("quasi_periodic_ell_periodic_b");
      current_statement__ = 199;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_ell_periodic_b", quasi_periodic_ell_periodic_b, 0);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("quasi_periodic_ell_decay_a",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 201;
      context__.validate_dims("data initialization",
        "quasi_periodic_ell_decay_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_ell_decay_a = std::vector<double>(n_quasi_periodic_kernels,
                                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 201;
      quasi_periodic_ell_decay_a = context__.vals_r("quasi_periodic_ell_decay_a");
      current_statement__ = 201;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_ell_decay_a", quasi_periodic_ell_decay_a, 0);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("quasi_periodic_ell_decay_b",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 203;
      context__.validate_dims("data initialization",
        "quasi_periodic_ell_decay_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      quasi_periodic_ell_decay_b = std::vector<double>(n_quasi_periodic_kernels,
                                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 203;
      quasi_periodic_ell_decay_b = context__.vals_r("quasi_periodic_ell_decay_b");
      current_statement__ = 203;
      stan::math::check_greater_or_equal(function__,
        "quasi_periodic_ell_decay_b", quasi_periodic_ell_decay_b, 0);
      current_statement__ = 204;
      context__.validate_dims("data initialization", "n_white_noise_kernels",
        "int", std::vector<size_t>{});
      n_white_noise_kernels = std::numeric_limits<int>::min();
      current_statement__ = 204;
      n_white_noise_kernels = context__.vals_i("n_white_noise_kernels")[(1 -
        1)];
      current_statement__ = 204;
      stan::math::check_greater_or_equal(function__, "n_white_noise_kernels",
        n_white_noise_kernels, 0);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("white_noise_sigma_squared_a",
        "n_white_noise_kernels", n_white_noise_kernels);
      current_statement__ = 206;
      context__.validate_dims("data initialization",
        "white_noise_sigma_squared_a", "double",
        std::vector<size_t>{static_cast<size_t>(n_white_noise_kernels)});
      white_noise_sigma_squared_a = std::vector<double>(n_white_noise_kernels,
                                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 206;
      white_noise_sigma_squared_a = context__.vals_r("white_noise_sigma_squared_a");
      current_statement__ = 206;
      stan::math::check_greater_or_equal(function__,
        "white_noise_sigma_squared_a", white_noise_sigma_squared_a, 0);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("white_noise_sigma_squared_b",
        "n_white_noise_kernels", n_white_noise_kernels);
      current_statement__ = 208;
      context__.validate_dims("data initialization",
        "white_noise_sigma_squared_b", "double",
        std::vector<size_t>{static_cast<size_t>(n_white_noise_kernels)});
      white_noise_sigma_squared_b = std::vector<double>(n_white_noise_kernels,
                                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 208;
      white_noise_sigma_squared_b = context__.vals_r("white_noise_sigma_squared_b");
      current_statement__ = 208;
      stan::math::check_greater_or_equal(function__,
        "white_noise_sigma_squared_b", white_noise_sigma_squared_b, 0);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("white_noise_L_shape",
        "n_white_noise_kernels", n_white_noise_kernels);
      current_statement__ = 210;
      context__.validate_dims("data initialization", "white_noise_L_shape",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_white_noise_kernels)});
      white_noise_L_shape = std::vector<double>(n_white_noise_kernels,
                              std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 210;
      white_noise_L_shape = context__.vals_r("white_noise_L_shape");
      current_statement__ = 210;
      stan::math::check_greater_or_equal(function__, "white_noise_L_shape",
        white_noise_L_shape, 0);
      current_statement__ = 211;
      context__.validate_dims("data initialization", "n_indices", "int",
        std::vector<size_t>{});
      n_indices = std::numeric_limits<int>::min();
      current_statement__ = 211;
      n_indices = context__.vals_i("n_indices")[(1 - 1)];
      current_statement__ = 211;
      stan::math::check_greater_or_equal(function__, "n_indices", n_indices,
        1);
      current_statement__ = 212;
      context__.validate_dims("data initialization", "n_blocks", "int",
        std::vector<size_t>{});
      n_blocks = std::numeric_limits<int>::min();
      current_statement__ = 212;
      n_blocks = context__.vals_i("n_blocks")[(1 - 1)];
      current_statement__ = 212;
      stan::math::check_greater_or_equal(function__, "n_blocks", n_blocks, 1);
      current_statement__ = 213;
      stan::math::validate_non_negative_index("block_indices", "n_indices",
        n_indices);
      current_statement__ = 214;
      context__.validate_dims("data initialization", "block_indices", "int",
        std::vector<size_t>{static_cast<size_t>(n_indices)});
      block_indices = std::vector<int>(n_indices,
                        std::numeric_limits<int>::min());
      current_statement__ = 214;
      block_indices = context__.vals_i("block_indices");
      current_statement__ = 215;
      stan::math::validate_non_negative_index("block_last_index", "n_blocks",
        n_blocks);
      current_statement__ = 216;
      context__.validate_dims("data initialization", "block_last_index",
        "int", std::vector<size_t>{static_cast<size_t>(n_blocks)});
      block_last_index = std::vector<int>(n_blocks,
                           std::numeric_limits<int>::min());
      current_statement__ = 216;
      block_last_index = context__.vals_i("block_last_index");
      current_statement__ = 217;
      stan::math::validate_non_negative_index("block_n_responses",
        "n_blocks", n_blocks);
      current_statement__ = 218;
      context__.validate_dims("data initialization", "block_n_responses",
        "int", std::vector<size_t>{static_cast<size_t>(n_blocks)});
      block_n_responses = std::vector<int>(n_blocks,
                            std::numeric_limits<int>::min());
      current_statement__ = 218;
      block_n_responses = context__.vals_i("block_n_responses");
      current_statement__ = 219;
      stan::math::validate_non_negative_index("block_kernel_group",
        "n_blocks", n_blocks);
      current_statement__ = 220;
      context__.validate_dims("data initialization", "block_kernel_group",
        "int", std::vector<size_t>{static_cast<size_t>(n_blocks)});
      block_kernel_group = std::vector<int>(n_blocks,
                             std::numeric_limits<int>::min());
      current_statement__ = 220;
      block_kernel_group = context__.vals_i("block_kernel_group");
      current_statement__ = 221;
      context__.validate_dims("data initialization", "use_parallel", "int",
        std::vector<size_t>{});
      use_parallel = std::numeric_limits<int>::min();
      current_statement__ = 221;
      use_parallel = context__.vals_i("use_parallel")[(1 - 1)];
      current_statement__ = 222;
      context__.validate_dims("data initialization", "grain_size", "int",
        std::vector<size_t>{});
      grain_size = std::numeric_limits<int>::min();
      current_statement__ = 222;
      grain_size = context__.vals_i("grain_size")[(1 - 1)];
      current_statement__ = 222;
      stan::math::check_greater_or_equal(function__, "grain_size",
        grain_size, 1);
      current_statement__ = 223;
      context__.validate_dims("data initialization", "strategy", "int",
        std::vector<size_t>{});
      strategy = std::numeric_limits<int>::min();
      current_statement__ = 223;
      strategy = context__.vals_i("strategy")[(1 - 1)];
      current_statement__ = 224;
      n_block_max = std::numeric_limits<int>::min();
      current_statement__ = 224;
      n_block_max = get_n_block_max(block_last_index, pstream__);
      current_statement__ = 225;
      n_stacked = std::numeric_limits<int>::min();
      current_statement__ = 225;
      n_stacked = (n * d);
      current_statement__ = 226;
      p_stacked = std::numeric_limits<int>::min();
      current_statement__ = 226;
      p_stacked = (p * d);
      current_statement__ = 227;
      stan::math::validate_non_negative_index("y_stacked", "n_stacked",
        n_stacked);
      current_statement__ = 228;
      y_stacked_data__ = Eigen::Matrix<double,-1,1>::Constant(n_stacked,
                           std::numeric_limits<double>::quiet_NaN());
      new (&y_stacked)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(y_stacked_data__.data(),
        n_stacked);
      current_statement__ = 228;
      stan::model::assign(y_stacked, stan::math::to_vector(y),
        "assigning variable y_stacked");
      current_statement__ = 229;
      stan::math::validate_non_negative_index("y_stacked_tilde", "n_stacked",
        n_stacked);
      current_statement__ = 230;
      y_stacked_tilde_data__ = Eigen::Matrix<double,-1,1>::Constant(n_stacked,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&y_stacked_tilde)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(y_stacked_tilde_data__.data(),
        n_stacked);
      current_statement__ = 231;
      stan::math::validate_non_negative_index("X_stacked", "n_stacked",
        n_stacked);
      current_statement__ = 232;
      stan::math::validate_non_negative_index("X_stacked", "p_stacked",
        p_stacked);
      current_statement__ = 233;
      X_stacked_data__ = Eigen::Matrix<double,-1,-1>::Constant(n_stacked,
                           p_stacked,
                           std::numeric_limits<double>::quiet_NaN());
      new (&X_stacked)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_stacked_data__.data(),
        n_stacked, p_stacked);
      current_statement__ = 234;
      stan::math::validate_non_negative_index("L_beta_prior_precision",
        "p_stacked", p_stacked);
      current_statement__ = 235;
      stan::math::validate_non_negative_index("L_beta_prior_precision",
        "p_stacked", p_stacked);
      current_statement__ = 236;
      L_beta_prior_precision_data__ = Eigen::Matrix<double,-1,-1>::Constant(p_stacked,
                                        p_stacked,
                                        std::numeric_limits<double>::quiet_NaN(
                                          ));
      new (&L_beta_prior_precision)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(L_beta_prior_precision_data__.data(),
        p_stacked, p_stacked);
      current_statement__ = 236;
      stan::model::assign(L_beta_prior_precision,
        stan::math::cholesky_decompose(beta_prior_precision),
        "assigning variable L_beta_prior_precision");
      current_statement__ = 237;
      stan::model::assign(X_stacked,
        stan::math::rep_matrix(0, n_stacked, p_stacked),
        "assigning variable X_stacked");
      current_statement__ = 244;
      for (int i = 1; i <= d; ++i) {
        current_statement__ = 242;
        for (int j = 1; j <= p; ++j) {
          int stacked_row_start = std::numeric_limits<int>::min();
          current_statement__ = 238;
          stacked_row_start = (((i - 1) * n) + 1);
          int stacked_col = std::numeric_limits<int>::min();
          current_statement__ = 239;
          stacked_col = (((i - 1) * p) + j);
          current_statement__ = 240;
          stan::model::assign(X_stacked,
            stan::model::rvalue(X, "X", stan::model::index_omni(),
              stan::model::index_uni(j)), "assigning variable X_stacked",
            stan::model::index_min_max(stacked_row_start, ((stacked_row_start
              + n) - 1)), stan::model::index_uni(stacked_col));
        }
      }
      current_statement__ = 245;
      stan::model::assign(y_stacked_tilde,
        stan::math::subtract(y_stacked,
          stan::math::multiply(X_stacked, beta_prior_mean)),
        "assigning variable y_stacked_tilde");
      current_statement__ = 246;
      stan::math::validate_non_negative_index("exponential_sigma_squared",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 247;
      stan::math::validate_non_negative_index("exponential_sigma_squared",
        "d", d);
      current_statement__ = 248;
      stan::math::validate_non_negative_index("exponential_L",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 249;
      stan::math::validate_non_negative_index("exponential_L", "d", d);
      current_statement__ = 249;
      stan::math::validate_non_negative_index("exponential_L", "d", d);
      current_statement__ = 250;
      stan::math::validate_non_negative_index("exponential_ell",
        "n_exponential_kernels", n_exponential_kernels);
      current_statement__ = 251;
      stan::math::validate_non_negative_index("matern32_sigma_squared",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 252;
      stan::math::validate_non_negative_index("matern32_sigma_squared", "d",
        d);
      current_statement__ = 253;
      stan::math::validate_non_negative_index("matern32_L",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 254;
      stan::math::validate_non_negative_index("matern32_L", "d", d);
      current_statement__ = 254;
      stan::math::validate_non_negative_index("matern32_L", "d", d);
      current_statement__ = 255;
      stan::math::validate_non_negative_index("matern32_ell",
        "n_matern32_kernels", n_matern32_kernels);
      current_statement__ = 256;
      stan::math::validate_non_negative_index("matern52_sigma_squared",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 257;
      stan::math::validate_non_negative_index("matern52_sigma_squared", "d",
        d);
      current_statement__ = 258;
      stan::math::validate_non_negative_index("matern52_L",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 259;
      stan::math::validate_non_negative_index("matern52_L", "d", d);
      current_statement__ = 259;
      stan::math::validate_non_negative_index("matern52_L", "d", d);
      current_statement__ = 260;
      stan::math::validate_non_negative_index("matern52_ell",
        "n_matern52_kernels", n_matern52_kernels);
      current_statement__ = 261;
      stan::math::validate_non_negative_index(
        "squared_exponential_sigma_squared", "n_squared_exponential_kernels",
        n_squared_exponential_kernels);
      current_statement__ = 262;
      stan::math::validate_non_negative_index(
        "squared_exponential_sigma_squared", "d", d);
      current_statement__ = 263;
      stan::math::validate_non_negative_index("squared_exponential_L",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 264;
      stan::math::validate_non_negative_index("squared_exponential_L", "d", d);
      current_statement__ = 264;
      stan::math::validate_non_negative_index("squared_exponential_L", "d", d);
      current_statement__ = 265;
      stan::math::validate_non_negative_index("squared_exponential_ell",
        "n_squared_exponential_kernels", n_squared_exponential_kernels);
      current_statement__ = 266;
      stan::math::validate_non_negative_index("quasi_periodic_sigma_squared",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 267;
      stan::math::validate_non_negative_index("quasi_periodic_sigma_squared",
        "d", d);
      current_statement__ = 268;
      stan::math::validate_non_negative_index("quasi_periodic_L",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 269;
      stan::math::validate_non_negative_index("quasi_periodic_L", "d", d);
      current_statement__ = 269;
      stan::math::validate_non_negative_index("quasi_periodic_L", "d", d);
      current_statement__ = 270;
      stan::math::validate_non_negative_index("quasi_periodic_ell_periodic",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 271;
      stan::math::validate_non_negative_index("quasi_periodic_ell_decay",
        "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
      current_statement__ = 272;
      stan::math::validate_non_negative_index("white_noise_sigma_squared",
        "n_white_noise_kernels", n_white_noise_kernels);
      current_statement__ = 273;
      stan::math::validate_non_negative_index("white_noise_sigma_squared",
        "d", d);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("white_noise_L",
        "n_white_noise_kernels", n_white_noise_kernels);
      current_statement__ = 275;
      stan::math::validate_non_negative_index("white_noise_L", "d", d);
      current_statement__ = 275;
      stan::math::validate_non_negative_index("white_noise_L", "d", d);
      current_statement__ = 276;
      stan::math::validate_non_negative_index("beta_hat", "p_stacked",
        p_stacked);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (n_exponential_kernels * d) + (n_exponential_kernels *
      ((d * (d - 1)) / 2)) + n_exponential_kernels + (n_matern32_kernels * d)
      + (n_matern32_kernels * ((d * (d - 1)) / 2)) + n_matern32_kernels +
      (n_matern52_kernels * d) + (n_matern52_kernels * ((d * (d - 1)) / 2)) +
      n_matern52_kernels + (n_squared_exponential_kernels * d) +
      (n_squared_exponential_kernels * ((d * (d - 1)) / 2)) +
      n_squared_exponential_kernels + (n_quasi_periodic_kernels * d) +
      (n_quasi_periodic_kernels * ((d * (d - 1)) / 2)) +
      n_quasi_periodic_kernels + n_quasi_periodic_kernels +
      (n_white_noise_kernels * d) + (n_white_noise_kernels * ((d * (d - 1)) /
      2));
  }
  inline std::string model_name() const final {
    return "model_ptide";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ptide_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        exponential_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 1;
      exponential_sigma_squared = in__.template read_constrain_lb<
                                    std::vector<
                                      Eigen::Matrix<local_scalar_t__,-1,1>>,
                                    jacobian__>(0, lp__,
                                    n_exponential_kernels, d);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> exponential_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 2;
      exponential_L = in__.template read_constrain_cholesky_factor_corr<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                        jacobian__>(lp__, n_exponential_kernels, d);
      std::vector<local_scalar_t__> exponential_ell =
        std::vector<local_scalar_t__>(n_exponential_kernels, DUMMY_VAR__);
      current_statement__ = 3;
      exponential_ell = in__.template read_constrain_lb<
                          std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                          n_exponential_kernels);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        matern32_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern32_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 4;
      matern32_sigma_squared = in__.template read_constrain_lb<
                                 std::vector<
                                   Eigen::Matrix<local_scalar_t__,-1,1>>,
                                 jacobian__>(0, lp__, n_matern32_kernels, d);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> matern32_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_matern32_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 5;
      matern32_L = in__.template read_constrain_cholesky_factor_corr<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                     jacobian__>(lp__, n_matern32_kernels, d);
      std::vector<local_scalar_t__> matern32_ell =
        std::vector<local_scalar_t__>(n_matern32_kernels, DUMMY_VAR__);
      current_statement__ = 6;
      matern32_ell = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       n_matern32_kernels);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        matern52_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern52_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 7;
      matern52_sigma_squared = in__.template read_constrain_lb<
                                 std::vector<
                                   Eigen::Matrix<local_scalar_t__,-1,1>>,
                                 jacobian__>(0, lp__, n_matern52_kernels, d);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> matern52_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_matern52_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 8;
      matern52_L = in__.template read_constrain_cholesky_factor_corr<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                     jacobian__>(lp__, n_matern52_kernels, d);
      std::vector<local_scalar_t__> matern52_ell =
        std::vector<local_scalar_t__>(n_matern52_kernels, DUMMY_VAR__);
      current_statement__ = 9;
      matern52_ell = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       n_matern52_kernels);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        squared_exponential_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_squared_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 10;
      squared_exponential_sigma_squared = in__.template read_constrain_lb<
                                            std::vector<
                                              Eigen::Matrix<local_scalar_t__,-1,1>>,
                                            jacobian__>(0, lp__,
                                            n_squared_exponential_kernels, d);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>
        squared_exponential_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_squared_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 11;
      squared_exponential_L = in__.template read_constrain_cholesky_factor_corr<
                                std::vector<
                                  Eigen::Matrix<local_scalar_t__,-1,-1>>,
                                jacobian__>(lp__,
                                n_squared_exponential_kernels, d);
      std::vector<local_scalar_t__> squared_exponential_ell =
        std::vector<local_scalar_t__>(n_squared_exponential_kernels,
          DUMMY_VAR__);
      current_statement__ = 12;
      squared_exponential_ell = in__.template read_constrain_lb<
                                  std::vector<local_scalar_t__>,
                                  jacobian__>(0, lp__,
                                  n_squared_exponential_kernels);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        quasi_periodic_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 13;
      quasi_periodic_sigma_squared = in__.template read_constrain_lb<
                                       std::vector<
                                         Eigen::Matrix<local_scalar_t__,-1,1>>,
                                       jacobian__>(0, lp__,
                                       n_quasi_periodic_kernels, d);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> quasi_periodic_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 14;
      quasi_periodic_L = in__.template read_constrain_cholesky_factor_corr<
                           std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                           jacobian__>(lp__, n_quasi_periodic_kernels, d);
      std::vector<local_scalar_t__> quasi_periodic_ell_periodic =
        std::vector<local_scalar_t__>(n_quasi_periodic_kernels, DUMMY_VAR__);
      current_statement__ = 15;
      quasi_periodic_ell_periodic = in__.template read_constrain_lb<
                                      std::vector<local_scalar_t__>,
                                      jacobian__>(0, lp__,
                                      n_quasi_periodic_kernels);
      std::vector<local_scalar_t__> quasi_periodic_ell_decay =
        std::vector<local_scalar_t__>(n_quasi_periodic_kernels, DUMMY_VAR__);
      current_statement__ = 16;
      quasi_periodic_ell_decay = in__.template read_constrain_lb<
                                   std::vector<local_scalar_t__>,
                                   jacobian__>(0, lp__,
                                   n_quasi_periodic_kernels);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        white_noise_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_white_noise_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 17;
      white_noise_sigma_squared = in__.template read_constrain_lb<
                                    std::vector<
                                      Eigen::Matrix<local_scalar_t__,-1,1>>,
                                    jacobian__>(0, lp__,
                                    n_white_noise_kernels, d);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> white_noise_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_white_noise_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 18;
      white_noise_L = in__.template read_constrain_cholesky_factor_corr<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                        jacobian__>(lp__, n_white_noise_kernels, d);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_hat =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_stacked,
          DUMMY_VAR__);
      local_scalar_t__ log_marginal = DUMMY_VAR__;
      {
        current_statement__ = 21;
        stan::math::validate_non_negative_index("exponential_sigma",
          "n_exponential_kernels", n_exponential_kernels);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("exponential_sigma", "d", d);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> exponential_sigma =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_exponential_kernels,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
        current_statement__ = 23;
        stan::model::assign(exponential_sigma,
          stan::math::sqrt(exponential_sigma_squared),
          "assigning variable exponential_sigma");
        current_statement__ = 24;
        stan::math::validate_non_negative_index("matern32_sigma",
          "n_matern32_kernels", n_matern32_kernels);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("matern32_sigma", "d", d);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> matern32_sigma =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern32_kernels,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
        current_statement__ = 26;
        stan::model::assign(matern32_sigma,
          stan::math::sqrt(matern32_sigma_squared),
          "assigning variable matern32_sigma");
        current_statement__ = 27;
        stan::math::validate_non_negative_index("matern52_sigma",
          "n_matern52_kernels", n_matern52_kernels);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("matern52_sigma", "d", d);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> matern52_sigma =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern52_kernels,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
        current_statement__ = 29;
        stan::model::assign(matern52_sigma,
          stan::math::sqrt(matern52_sigma_squared),
          "assigning variable matern52_sigma");
        current_statement__ = 30;
        stan::math::validate_non_negative_index("squared_exponential_sigma",
          "n_squared_exponential_kernels", n_squared_exponential_kernels);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("squared_exponential_sigma",
          "d", d);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          squared_exponential_sigma =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_squared_exponential_kernels,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
        current_statement__ = 32;
        stan::model::assign(squared_exponential_sigma,
          stan::math::sqrt(squared_exponential_sigma_squared),
          "assigning variable squared_exponential_sigma");
        current_statement__ = 33;
        stan::math::validate_non_negative_index("quasi_periodic_sigma",
          "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("quasi_periodic_sigma", "d",
          d);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          quasi_periodic_sigma =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_quasi_periodic_kernels,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
        current_statement__ = 35;
        stan::model::assign(quasi_periodic_sigma,
          stan::math::sqrt(quasi_periodic_sigma_squared),
          "assigning variable quasi_periodic_sigma");
        current_statement__ = 36;
        stan::math::validate_non_negative_index("white_noise_sigma",
          "n_white_noise_kernels", n_white_noise_kernels);
        current_statement__ = 37;
        stan::math::validate_non_negative_index("white_noise_sigma", "d", d);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> white_noise_sigma =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_white_noise_kernels,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
        current_statement__ = 38;
        stan::model::assign(white_noise_sigma,
          stan::math::sqrt(white_noise_sigma_squared),
          "assigning variable white_noise_sigma");
        current_statement__ = 39;
        stan::math::validate_non_negative_index("components",
          "2 + p_stacked * p_stacked + 2 * p_stacked", ((2 + (p_stacked *
          p_stacked)) + (2 * p_stacked)));
        Eigen::Matrix<local_scalar_t__,-1,1> components =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(((2 + (p_stacked *
            p_stacked)) + (2 * p_stacked)), DUMMY_VAR__);
        local_scalar_t__ log_det = DUMMY_VAR__;
        current_statement__ = 41;
        log_det = 0;
        local_scalar_t__ y_tildet_Q_y_tilde = DUMMY_VAR__;
        current_statement__ = 42;
        y_tildet_Q_y_tilde = 0;
        current_statement__ = 43;
        stan::math::validate_non_negative_index("Xt_Q_X", "p_stacked",
          p_stacked);
        current_statement__ = 44;
        stan::math::validate_non_negative_index("Xt_Q_X", "p_stacked",
          p_stacked);
        Eigen::Matrix<local_scalar_t__,-1,-1> Xt_Q_X =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p_stacked,
            p_stacked, DUMMY_VAR__);
        current_statement__ = 45;
        stan::model::assign(Xt_Q_X,
          stan::math::rep_matrix(0, p_stacked, p_stacked),
          "assigning variable Xt_Q_X");
        current_statement__ = 46;
        stan::math::validate_non_negative_index("Xt_Q_y", "p_stacked",
          p_stacked);
        Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_stacked,
            DUMMY_VAR__);
        current_statement__ = 47;
        stan::model::assign(Xt_Q_y, stan::math::rep_vector(0, p_stacked),
          "assigning variable Xt_Q_y");
        current_statement__ = 48;
        stan::math::validate_non_negative_index("Xt_Q_y_tilde", "p_stacked",
          p_stacked);
        Eigen::Matrix<local_scalar_t__,-1,1> Xt_Q_y_tilde =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_stacked,
            DUMMY_VAR__);
        current_statement__ = 49;
        stan::model::assign(Xt_Q_y_tilde,
          stan::math::rep_vector(0, p_stacked),
          "assigning variable Xt_Q_y_tilde");
        current_statement__ = 50;
        stan::math::validate_non_negative_index("L_beta_precision",
          "p_stacked", p_stacked);
        current_statement__ = 51;
        stan::math::validate_non_negative_index("L_beta_precision",
          "p_stacked", p_stacked);
        Eigen::Matrix<local_scalar_t__,-1,-1> L_beta_precision =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p_stacked,
            p_stacked, DUMMY_VAR__);
        current_statement__ = 53;
        stan::math::validate_non_negative_index("beta_precision",
          "p_stacked", p_stacked);
        current_statement__ = 54;
        stan::math::validate_non_negative_index("beta_precision",
          "p_stacked", p_stacked);
        Eigen::Matrix<local_scalar_t__,-1,-1> beta_precision =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(p_stacked,
            p_stacked, DUMMY_VAR__);
        current_statement__ = 56;
        stan::math::validate_non_negative_index("beta_rhs", "p_stacked",
          p_stacked);
        Eigen::Matrix<local_scalar_t__,-1,1> beta_rhs =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_stacked,
            DUMMY_VAR__);
        current_statement__ = 62;
        if (stan::math::logical_gt(use_parallel, 0)) {
          current_statement__ = 60;
          stan::model::assign(components,
            vecchia_reduce_sum(1, n_blocks, grain_size, strategy,
              exponential_sigma, exponential_L, exponential_ell,
              matern32_sigma, matern32_L, matern32_ell, matern52_sigma,
              matern52_L, matern52_ell, squared_exponential_sigma,
              squared_exponential_L, squared_exponential_ell,
              quasi_periodic_sigma, quasi_periodic_L,
              quasi_periodic_ell_periodic, quasi_periodic_ell_decay,
              white_noise_sigma, white_noise_L, x, d, y_stacked,
              y_stacked_tilde, X_stacked, exponential_length_dilation,
              matern32_length_dilation, matern52_length_dilation,
              squared_exponential_length_dilation, quasi_periodic_period,
              quasi_periodic_length_dilation, block_indices,
              block_last_index, block_n_responses, block_kernel_group,
              pstream__), "assigning variable components");
        } else {
          current_statement__ = 58;
          stan::model::assign(components,
            vecchia_partial_sums(1, n_blocks, exponential_sigma,
              exponential_L, exponential_ell, matern32_sigma, matern32_L,
              matern32_ell, matern52_sigma, matern52_L, matern52_ell,
              squared_exponential_sigma, squared_exponential_L,
              squared_exponential_ell, quasi_periodic_sigma,
              quasi_periodic_L, quasi_periodic_ell_periodic,
              quasi_periodic_ell_decay, white_noise_sigma, white_noise_L, x,
              d, y_stacked, y_stacked_tilde, X_stacked,
              exponential_length_dilation, matern32_length_dilation,
              matern52_length_dilation, squared_exponential_length_dilation,
              quasi_periodic_period, quasi_periodic_length_dilation,
              block_indices, block_last_index, block_n_responses,
              block_kernel_group, pstream__), "assigning variable components");
        }
        current_statement__ = 63;
        log_det = stan::model::rvalue(components, "components",
                    stan::model::index_uni(1));
        current_statement__ = 64;
        y_tildet_Q_y_tilde = stan::model::rvalue(components, "components",
                               stan::model::index_uni(2));
        current_statement__ = 65;
        stan::model::assign(Xt_Q_X,
          stan::math::to_matrix(
            stan::model::rvalue(components, "components",
              stan::model::index_min_max(3, (2 + (p_stacked * p_stacked)))),
            p_stacked, p_stacked), "assigning variable Xt_Q_X");
        current_statement__ = 66;
        stan::model::assign(Xt_Q_y,
          stan::model::rvalue(components, "components",
            stan::model::index_min_max((3 + (p_stacked * p_stacked)), ((2 +
              (p_stacked * p_stacked)) + p_stacked))),
          "assigning variable Xt_Q_y");
        current_statement__ = 67;
        stan::model::assign(Xt_Q_y_tilde,
          stan::model::rvalue(components, "components",
            stan::model::index_min(((3 + (p_stacked * p_stacked)) +
              p_stacked))), "assigning variable Xt_Q_y_tilde");
        current_statement__ = 68;
        stan::model::assign(beta_precision,
          stan::math::add(Xt_Q_X, beta_prior_precision),
          "assigning variable beta_precision");
        current_statement__ = 69;
        stan::model::assign(L_beta_precision,
          stan::math::cholesky_decompose(beta_precision),
          "assigning variable L_beta_precision");
        current_statement__ = 70;
        stan::model::assign(beta_rhs,
          stan::math::add(Xt_Q_y,
            stan::math::multiply(beta_prior_precision, beta_prior_mean)),
          "assigning variable beta_rhs");
        current_statement__ = 71;
        stan::model::assign(beta_hat,
          chol_solve_L_b(L_beta_precision, beta_rhs, pstream__),
          "assigning variable beta_hat");
        current_statement__ = 72;
        log_marginal = (-0.5 * (((((2 *
          stan::math::sum(
            stan::math::log(stan::math::diagonal(L_beta_precision))))
          - (2 *
          stan::math::sum(
            stan::math::log(stan::math::diagonal(L_beta_prior_precision)))))
          + log_det) + y_tildet_Q_y_tilde) -
          stan::math::sum(
            stan::math::square(
              stan::math::mdivide_left_tri_low(L_beta_precision, Xt_Q_y_tilde)))));
      }
      {
        current_statement__ = 74;
        lp_accum__.add(log_marginal);
        current_statement__ = 81;
        if (stan::math::logical_gt(n_exponential_kernels, 0)) {
          current_statement__ = 79;
          for (int i = 1; i <= n_exponential_kernels; ++i) {
            current_statement__ = 75;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(exponential_sigma_squared,
                               "exponential_sigma_squared",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(exponential_sigma_squared_a,
                               "exponential_sigma_squared_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(exponential_sigma_squared_b,
                               "exponential_sigma_squared_b",
                               stan::model::index_uni(i))));
            current_statement__ = 76;
            lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                             stan::model::rvalue(exponential_L,
                               "exponential_L", stan::model::index_uni(i)),
                             stan::model::rvalue(exponential_L_shape,
                               "exponential_L_shape",
                               stan::model::index_uni(i))));
            current_statement__ = 77;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(exponential_ell,
                               "exponential_ell", stan::model::index_uni(i)),
                             stan::model::rvalue(exponential_ell_a,
                               "exponential_ell_a", stan::model::index_uni(i)),
                             stan::model::rvalue(exponential_ell_b,
                               "exponential_ell_b", stan::model::index_uni(i))));
          }
        }
        current_statement__ = 88;
        if (stan::math::logical_gt(n_matern32_kernels, 0)) {
          current_statement__ = 86;
          for (int i = 1; i <= n_matern32_kernels; ++i) {
            current_statement__ = 82;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(matern32_sigma_squared,
                               "matern32_sigma_squared",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(matern32_sigma_squared_a,
                               "matern32_sigma_squared_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(matern32_sigma_squared_b,
                               "matern32_sigma_squared_b",
                               stan::model::index_uni(i))));
            current_statement__ = 83;
            lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                             stan::model::rvalue(matern32_L, "matern32_L",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(matern32_L_shape,
                               "matern32_L_shape", stan::model::index_uni(i))));
            current_statement__ = 84;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(matern32_ell,
                               "matern32_ell", stan::model::index_uni(i)),
                             stan::model::rvalue(matern32_ell_a,
                               "matern32_ell_a", stan::model::index_uni(i)),
                             stan::model::rvalue(matern32_ell_b,
                               "matern32_ell_b", stan::model::index_uni(i))));
          }
        }
        current_statement__ = 95;
        if (stan::math::logical_gt(n_matern52_kernels, 0)) {
          current_statement__ = 93;
          for (int i = 1; i <= n_matern52_kernels; ++i) {
            current_statement__ = 89;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(matern52_sigma_squared,
                               "matern52_sigma_squared",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(matern52_sigma_squared_a,
                               "matern52_sigma_squared_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(matern52_sigma_squared_b,
                               "matern52_sigma_squared_b",
                               stan::model::index_uni(i))));
            current_statement__ = 90;
            lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                             stan::model::rvalue(matern52_L, "matern52_L",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(matern52_L_shape,
                               "matern52_L_shape", stan::model::index_uni(i))));
            current_statement__ = 91;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(matern52_ell,
                               "matern52_ell", stan::model::index_uni(i)),
                             stan::model::rvalue(matern52_ell_a,
                               "matern52_ell_a", stan::model::index_uni(i)),
                             stan::model::rvalue(matern52_ell_b,
                               "matern52_ell_b", stan::model::index_uni(i))));
          }
        }
        current_statement__ = 102;
        if (stan::math::logical_gt(n_squared_exponential_kernels, 0)) {
          current_statement__ = 100;
          for (int i = 1; i <= n_squared_exponential_kernels; ++i) {
            current_statement__ = 96;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(
                               squared_exponential_sigma_squared,
                               "squared_exponential_sigma_squared",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(
                               squared_exponential_sigma_squared_a,
                               "squared_exponential_sigma_squared_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(
                               squared_exponential_sigma_squared_b,
                               "squared_exponential_sigma_squared_b",
                               stan::model::index_uni(i))));
            current_statement__ = 97;
            lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                             stan::model::rvalue(squared_exponential_L,
                               "squared_exponential_L",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(squared_exponential_L_shape,
                               "squared_exponential_L_shape",
                               stan::model::index_uni(i))));
            current_statement__ = 98;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(squared_exponential_ell,
                               "squared_exponential_ell",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(squared_exponential_ell_a,
                               "squared_exponential_ell_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(squared_exponential_ell_b,
                               "squared_exponential_ell_b",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 110;
        if (stan::math::logical_gt(n_quasi_periodic_kernels, 0)) {
          current_statement__ = 108;
          for (int i = 1; i <= n_quasi_periodic_kernels; ++i) {
            current_statement__ = 103;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(
                               quasi_periodic_sigma_squared,
                               "quasi_periodic_sigma_squared",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(
                               quasi_periodic_sigma_squared_a,
                               "quasi_periodic_sigma_squared_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(
                               quasi_periodic_sigma_squared_b,
                               "quasi_periodic_sigma_squared_b",
                               stan::model::index_uni(i))));
            current_statement__ = 104;
            lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                             stan::model::rvalue(quasi_periodic_L,
                               "quasi_periodic_L", stan::model::index_uni(i)),
                             stan::model::rvalue(quasi_periodic_L_shape,
                               "quasi_periodic_L_shape",
                               stan::model::index_uni(i))));
            current_statement__ = 105;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(quasi_periodic_ell_periodic,
                               "quasi_periodic_ell_periodic",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(
                               quasi_periodic_ell_periodic_a,
                               "quasi_periodic_ell_periodic_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(
                               quasi_periodic_ell_periodic_b,
                               "quasi_periodic_ell_periodic_b",
                               stan::model::index_uni(i))));
            current_statement__ = 106;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(quasi_periodic_ell_decay,
                               "quasi_periodic_ell_decay",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(quasi_periodic_ell_decay_a,
                               "quasi_periodic_ell_decay_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(quasi_periodic_ell_decay_b,
                               "quasi_periodic_ell_decay_b",
                               stan::model::index_uni(i))));
          }
        }
        current_statement__ = 116;
        if (stan::math::logical_gt(n_white_noise_kernels, 0)) {
          current_statement__ = 114;
          for (int i = 1; i <= n_white_noise_kernels; ++i) {
            current_statement__ = 111;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(white_noise_sigma_squared,
                               "white_noise_sigma_squared",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(white_noise_sigma_squared_a,
                               "white_noise_sigma_squared_a",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(white_noise_sigma_squared_b,
                               "white_noise_sigma_squared_b",
                               stan::model::index_uni(i))));
            current_statement__ = 112;
            lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(
                             stan::model::rvalue(white_noise_L,
                               "white_noise_L", stan::model::index_uni(i)),
                             stan::model::rvalue(white_noise_L_shape,
                               "white_noise_L_shape",
                               stan::model::index_uni(i))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ptide_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,1>> exponential_sigma_squared =
        std::vector<Eigen::Matrix<double,-1,1>>(n_exponential_kernels,
          Eigen::Matrix<double,-1,1>::Constant(d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      exponential_sigma_squared = in__.template read_constrain_lb<
                                    std::vector<
                                      Eigen::Matrix<local_scalar_t__,-1,1>>,
                                    jacobian__>(0, lp__,
                                    n_exponential_kernels, d);
      std::vector<Eigen::Matrix<double,-1,-1>> exponential_L =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_exponential_kernels,
          Eigen::Matrix<double,-1,-1>::Constant(d, d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      exponential_L = in__.template read_constrain_cholesky_factor_corr<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                        jacobian__>(lp__, n_exponential_kernels, d);
      std::vector<double> exponential_ell =
        std::vector<double>(n_exponential_kernels,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      exponential_ell = in__.template read_constrain_lb<
                          std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                          n_exponential_kernels);
      std::vector<Eigen::Matrix<double,-1,1>> matern32_sigma_squared =
        std::vector<Eigen::Matrix<double,-1,1>>(n_matern32_kernels,
          Eigen::Matrix<double,-1,1>::Constant(d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      matern32_sigma_squared = in__.template read_constrain_lb<
                                 std::vector<
                                   Eigen::Matrix<local_scalar_t__,-1,1>>,
                                 jacobian__>(0, lp__, n_matern32_kernels, d);
      std::vector<Eigen::Matrix<double,-1,-1>> matern32_L =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_matern32_kernels,
          Eigen::Matrix<double,-1,-1>::Constant(d, d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      matern32_L = in__.template read_constrain_cholesky_factor_corr<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                     jacobian__>(lp__, n_matern32_kernels, d);
      std::vector<double> matern32_ell =
        std::vector<double>(n_matern32_kernels,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      matern32_ell = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       n_matern32_kernels);
      std::vector<Eigen::Matrix<double,-1,1>> matern52_sigma_squared =
        std::vector<Eigen::Matrix<double,-1,1>>(n_matern52_kernels,
          Eigen::Matrix<double,-1,1>::Constant(d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      matern52_sigma_squared = in__.template read_constrain_lb<
                                 std::vector<
                                   Eigen::Matrix<local_scalar_t__,-1,1>>,
                                 jacobian__>(0, lp__, n_matern52_kernels, d);
      std::vector<Eigen::Matrix<double,-1,-1>> matern52_L =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_matern52_kernels,
          Eigen::Matrix<double,-1,-1>::Constant(d, d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      matern52_L = in__.template read_constrain_cholesky_factor_corr<
                     std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                     jacobian__>(lp__, n_matern52_kernels, d);
      std::vector<double> matern52_ell =
        std::vector<double>(n_matern52_kernels,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      matern52_ell = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       n_matern52_kernels);
      std::vector<Eigen::Matrix<double,-1,1>>
        squared_exponential_sigma_squared =
        std::vector<Eigen::Matrix<double,-1,1>>(n_squared_exponential_kernels,
          Eigen::Matrix<double,-1,1>::Constant(d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 10;
      squared_exponential_sigma_squared = in__.template read_constrain_lb<
                                            std::vector<
                                              Eigen::Matrix<local_scalar_t__,-1,1>>,
                                            jacobian__>(0, lp__,
                                            n_squared_exponential_kernels, d);
      std::vector<Eigen::Matrix<double,-1,-1>> squared_exponential_L =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_squared_exponential_kernels,
          Eigen::Matrix<double,-1,-1>::Constant(d, d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 11;
      squared_exponential_L = in__.template read_constrain_cholesky_factor_corr<
                                std::vector<
                                  Eigen::Matrix<local_scalar_t__,-1,-1>>,
                                jacobian__>(lp__,
                                n_squared_exponential_kernels, d);
      std::vector<double> squared_exponential_ell =
        std::vector<double>(n_squared_exponential_kernels,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      squared_exponential_ell = in__.template read_constrain_lb<
                                  std::vector<local_scalar_t__>,
                                  jacobian__>(0, lp__,
                                  n_squared_exponential_kernels);
      std::vector<Eigen::Matrix<double,-1,1>> quasi_periodic_sigma_squared =
        std::vector<Eigen::Matrix<double,-1,1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<double,-1,1>::Constant(d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 13;
      quasi_periodic_sigma_squared = in__.template read_constrain_lb<
                                       std::vector<
                                         Eigen::Matrix<local_scalar_t__,-1,1>>,
                                       jacobian__>(0, lp__,
                                       n_quasi_periodic_kernels, d);
      std::vector<Eigen::Matrix<double,-1,-1>> quasi_periodic_L =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<double,-1,-1>::Constant(d, d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 14;
      quasi_periodic_L = in__.template read_constrain_cholesky_factor_corr<
                           std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                           jacobian__>(lp__, n_quasi_periodic_kernels, d);
      std::vector<double> quasi_periodic_ell_periodic =
        std::vector<double>(n_quasi_periodic_kernels,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      quasi_periodic_ell_periodic = in__.template read_constrain_lb<
                                      std::vector<local_scalar_t__>,
                                      jacobian__>(0, lp__,
                                      n_quasi_periodic_kernels);
      std::vector<double> quasi_periodic_ell_decay =
        std::vector<double>(n_quasi_periodic_kernels,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      quasi_periodic_ell_decay = in__.template read_constrain_lb<
                                   std::vector<local_scalar_t__>,
                                   jacobian__>(0, lp__,
                                   n_quasi_periodic_kernels);
      std::vector<Eigen::Matrix<double,-1,1>> white_noise_sigma_squared =
        std::vector<Eigen::Matrix<double,-1,1>>(n_white_noise_kernels,
          Eigen::Matrix<double,-1,1>::Constant(d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 17;
      white_noise_sigma_squared = in__.template read_constrain_lb<
                                    std::vector<
                                      Eigen::Matrix<local_scalar_t__,-1,1>>,
                                    jacobian__>(0, lp__,
                                    n_white_noise_kernels, d);
      std::vector<Eigen::Matrix<double,-1,-1>> white_noise_L =
        std::vector<Eigen::Matrix<double,-1,-1>>(n_white_noise_kernels,
          Eigen::Matrix<double,-1,-1>::Constant(d, d,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 18;
      white_noise_L = in__.template read_constrain_cholesky_factor_corr<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>,
                        jacobian__>(lp__, n_white_noise_kernels, d);
      Eigen::Matrix<double,-1,1> beta_hat =
        Eigen::Matrix<double,-1,1>::Constant(p_stacked,
          std::numeric_limits<double>::quiet_NaN());
      double log_marginal = std::numeric_limits<double>::quiet_NaN();
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_exponential_kernels; ++sym2__) {
          out__.write(exponential_sigma_squared[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_exponential_kernels; ++sym3__) {
            out__.write(stan::model::rvalue(exponential_L, "exponential_L",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(exponential_ell);
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_matern32_kernels; ++sym2__) {
          out__.write(matern32_sigma_squared[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_matern32_kernels; ++sym3__) {
            out__.write(stan::model::rvalue(matern32_L, "matern32_L",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(matern32_ell);
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_matern52_kernels; ++sym2__) {
          out__.write(matern52_sigma_squared[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_matern52_kernels; ++sym3__) {
            out__.write(stan::model::rvalue(matern52_L, "matern52_L",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(matern52_ell);
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <=
             n_squared_exponential_kernels; ++sym2__) {
          out__.write(squared_exponential_sigma_squared[(sym2__ - 1)][(sym1__
            - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <=
               n_squared_exponential_kernels; ++sym3__) {
            out__.write(stan::model::rvalue(squared_exponential_L,
                          "squared_exponential_L",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(squared_exponential_ell);
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_quasi_periodic_kernels; ++sym2__) {
          out__.write(quasi_periodic_sigma_squared[(sym2__ - 1)][(sym1__ -
            1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_quasi_periodic_kernels; ++sym3__) {
            out__.write(stan::model::rvalue(quasi_periodic_L,
                          "quasi_periodic_L", stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(quasi_periodic_ell_periodic);
      out__.write(quasi_periodic_ell_decay);
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_white_noise_kernels; ++sym2__) {
          out__.write(white_noise_sigma_squared[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_white_noise_kernels; ++sym3__) {
            out__.write(stan::model::rvalue(white_noise_L, "white_noise_L",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        current_statement__ = 21;
        stan::math::validate_non_negative_index("exponential_sigma",
          "n_exponential_kernels", n_exponential_kernels);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("exponential_sigma", "d", d);
        std::vector<Eigen::Matrix<double,-1,1>> exponential_sigma =
          std::vector<Eigen::Matrix<double,-1,1>>(n_exponential_kernels,
            Eigen::Matrix<double,-1,1>::Constant(d,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 23;
        stan::model::assign(exponential_sigma,
          stan::math::sqrt(exponential_sigma_squared),
          "assigning variable exponential_sigma");
        current_statement__ = 24;
        stan::math::validate_non_negative_index("matern32_sigma",
          "n_matern32_kernels", n_matern32_kernels);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("matern32_sigma", "d", d);
        std::vector<Eigen::Matrix<double,-1,1>> matern32_sigma =
          std::vector<Eigen::Matrix<double,-1,1>>(n_matern32_kernels,
            Eigen::Matrix<double,-1,1>::Constant(d,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 26;
        stan::model::assign(matern32_sigma,
          stan::math::sqrt(matern32_sigma_squared),
          "assigning variable matern32_sigma");
        current_statement__ = 27;
        stan::math::validate_non_negative_index("matern52_sigma",
          "n_matern52_kernels", n_matern52_kernels);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("matern52_sigma", "d", d);
        std::vector<Eigen::Matrix<double,-1,1>> matern52_sigma =
          std::vector<Eigen::Matrix<double,-1,1>>(n_matern52_kernels,
            Eigen::Matrix<double,-1,1>::Constant(d,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 29;
        stan::model::assign(matern52_sigma,
          stan::math::sqrt(matern52_sigma_squared),
          "assigning variable matern52_sigma");
        current_statement__ = 30;
        stan::math::validate_non_negative_index("squared_exponential_sigma",
          "n_squared_exponential_kernels", n_squared_exponential_kernels);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("squared_exponential_sigma",
          "d", d);
        std::vector<Eigen::Matrix<double,-1,1>> squared_exponential_sigma =
          std::vector<Eigen::Matrix<double,-1,1>>(n_squared_exponential_kernels,
            Eigen::Matrix<double,-1,1>::Constant(d,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 32;
        stan::model::assign(squared_exponential_sigma,
          stan::math::sqrt(squared_exponential_sigma_squared),
          "assigning variable squared_exponential_sigma");
        current_statement__ = 33;
        stan::math::validate_non_negative_index("quasi_periodic_sigma",
          "n_quasi_periodic_kernels", n_quasi_periodic_kernels);
        current_statement__ = 34;
        stan::math::validate_non_negative_index("quasi_periodic_sigma", "d",
          d);
        std::vector<Eigen::Matrix<double,-1,1>> quasi_periodic_sigma =
          std::vector<Eigen::Matrix<double,-1,1>>(n_quasi_periodic_kernels,
            Eigen::Matrix<double,-1,1>::Constant(d,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 35;
        stan::model::assign(quasi_periodic_sigma,
          stan::math::sqrt(quasi_periodic_sigma_squared),
          "assigning variable quasi_periodic_sigma");
        current_statement__ = 36;
        stan::math::validate_non_negative_index("white_noise_sigma",
          "n_white_noise_kernels", n_white_noise_kernels);
        current_statement__ = 37;
        stan::math::validate_non_negative_index("white_noise_sigma", "d", d);
        std::vector<Eigen::Matrix<double,-1,1>> white_noise_sigma =
          std::vector<Eigen::Matrix<double,-1,1>>(n_white_noise_kernels,
            Eigen::Matrix<double,-1,1>::Constant(d,
              std::numeric_limits<double>::quiet_NaN()));
        current_statement__ = 38;
        stan::model::assign(white_noise_sigma,
          stan::math::sqrt(white_noise_sigma_squared),
          "assigning variable white_noise_sigma");
        current_statement__ = 39;
        stan::math::validate_non_negative_index("components",
          "2 + p_stacked * p_stacked + 2 * p_stacked", ((2 + (p_stacked *
          p_stacked)) + (2 * p_stacked)));
        Eigen::Matrix<double,-1,1> components =
          Eigen::Matrix<double,-1,1>::Constant(((2 + (p_stacked * p_stacked))
            + (2 * p_stacked)), std::numeric_limits<double>::quiet_NaN());
        double log_det = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 41;
        log_det = 0;
        double y_tildet_Q_y_tilde = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 42;
        y_tildet_Q_y_tilde = 0;
        current_statement__ = 43;
        stan::math::validate_non_negative_index("Xt_Q_X", "p_stacked",
          p_stacked);
        current_statement__ = 44;
        stan::math::validate_non_negative_index("Xt_Q_X", "p_stacked",
          p_stacked);
        Eigen::Matrix<double,-1,-1> Xt_Q_X =
          Eigen::Matrix<double,-1,-1>::Constant(p_stacked, p_stacked,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 45;
        stan::model::assign(Xt_Q_X,
          stan::math::rep_matrix(0, p_stacked, p_stacked),
          "assigning variable Xt_Q_X");
        current_statement__ = 46;
        stan::math::validate_non_negative_index("Xt_Q_y", "p_stacked",
          p_stacked);
        Eigen::Matrix<double,-1,1> Xt_Q_y =
          Eigen::Matrix<double,-1,1>::Constant(p_stacked,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 47;
        stan::model::assign(Xt_Q_y, stan::math::rep_vector(0, p_stacked),
          "assigning variable Xt_Q_y");
        current_statement__ = 48;
        stan::math::validate_non_negative_index("Xt_Q_y_tilde", "p_stacked",
          p_stacked);
        Eigen::Matrix<double,-1,1> Xt_Q_y_tilde =
          Eigen::Matrix<double,-1,1>::Constant(p_stacked,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 49;
        stan::model::assign(Xt_Q_y_tilde,
          stan::math::rep_vector(0, p_stacked),
          "assigning variable Xt_Q_y_tilde");
        current_statement__ = 50;
        stan::math::validate_non_negative_index("L_beta_precision",
          "p_stacked", p_stacked);
        current_statement__ = 51;
        stan::math::validate_non_negative_index("L_beta_precision",
          "p_stacked", p_stacked);
        Eigen::Matrix<double,-1,-1> L_beta_precision =
          Eigen::Matrix<double,-1,-1>::Constant(p_stacked, p_stacked,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 53;
        stan::math::validate_non_negative_index("beta_precision",
          "p_stacked", p_stacked);
        current_statement__ = 54;
        stan::math::validate_non_negative_index("beta_precision",
          "p_stacked", p_stacked);
        Eigen::Matrix<double,-1,-1> beta_precision =
          Eigen::Matrix<double,-1,-1>::Constant(p_stacked, p_stacked,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 56;
        stan::math::validate_non_negative_index("beta_rhs", "p_stacked",
          p_stacked);
        Eigen::Matrix<double,-1,1> beta_rhs =
          Eigen::Matrix<double,-1,1>::Constant(p_stacked,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 62;
        if (stan::math::logical_gt(use_parallel, 0)) {
          current_statement__ = 60;
          stan::model::assign(components,
            vecchia_reduce_sum(1, n_blocks, grain_size, strategy,
              exponential_sigma, exponential_L, exponential_ell,
              matern32_sigma, matern32_L, matern32_ell, matern52_sigma,
              matern52_L, matern52_ell, squared_exponential_sigma,
              squared_exponential_L, squared_exponential_ell,
              quasi_periodic_sigma, quasi_periodic_L,
              quasi_periodic_ell_periodic, quasi_periodic_ell_decay,
              white_noise_sigma, white_noise_L, x, d, y_stacked,
              y_stacked_tilde, X_stacked, exponential_length_dilation,
              matern32_length_dilation, matern52_length_dilation,
              squared_exponential_length_dilation, quasi_periodic_period,
              quasi_periodic_length_dilation, block_indices,
              block_last_index, block_n_responses, block_kernel_group,
              pstream__), "assigning variable components");
        } else {
          current_statement__ = 58;
          stan::model::assign(components,
            vecchia_partial_sums(1, n_blocks, exponential_sigma,
              exponential_L, exponential_ell, matern32_sigma, matern32_L,
              matern32_ell, matern52_sigma, matern52_L, matern52_ell,
              squared_exponential_sigma, squared_exponential_L,
              squared_exponential_ell, quasi_periodic_sigma,
              quasi_periodic_L, quasi_periodic_ell_periodic,
              quasi_periodic_ell_decay, white_noise_sigma, white_noise_L, x,
              d, y_stacked, y_stacked_tilde, X_stacked,
              exponential_length_dilation, matern32_length_dilation,
              matern52_length_dilation, squared_exponential_length_dilation,
              quasi_periodic_period, quasi_periodic_length_dilation,
              block_indices, block_last_index, block_n_responses,
              block_kernel_group, pstream__), "assigning variable components");
        }
        current_statement__ = 63;
        log_det = stan::model::rvalue(components, "components",
                    stan::model::index_uni(1));
        current_statement__ = 64;
        y_tildet_Q_y_tilde = stan::model::rvalue(components, "components",
                               stan::model::index_uni(2));
        current_statement__ = 65;
        stan::model::assign(Xt_Q_X,
          stan::math::to_matrix(
            stan::model::rvalue(components, "components",
              stan::model::index_min_max(3, (2 + (p_stacked * p_stacked)))),
            p_stacked, p_stacked), "assigning variable Xt_Q_X");
        current_statement__ = 66;
        stan::model::assign(Xt_Q_y,
          stan::model::rvalue(components, "components",
            stan::model::index_min_max((3 + (p_stacked * p_stacked)), ((2 +
              (p_stacked * p_stacked)) + p_stacked))),
          "assigning variable Xt_Q_y");
        current_statement__ = 67;
        stan::model::assign(Xt_Q_y_tilde,
          stan::model::rvalue(components, "components",
            stan::model::index_min(((3 + (p_stacked * p_stacked)) +
              p_stacked))), "assigning variable Xt_Q_y_tilde");
        current_statement__ = 68;
        stan::model::assign(beta_precision,
          stan::math::add(Xt_Q_X, beta_prior_precision),
          "assigning variable beta_precision");
        current_statement__ = 69;
        stan::model::assign(L_beta_precision,
          stan::math::cholesky_decompose(beta_precision),
          "assigning variable L_beta_precision");
        current_statement__ = 70;
        stan::model::assign(beta_rhs,
          stan::math::add(Xt_Q_y,
            stan::math::multiply(beta_prior_precision, beta_prior_mean)),
          "assigning variable beta_rhs");
        current_statement__ = 71;
        stan::model::assign(beta_hat,
          chol_solve_L_b(L_beta_precision, beta_rhs, pstream__),
          "assigning variable beta_hat");
        current_statement__ = 72;
        log_marginal = (-0.5 * (((((2 *
          stan::math::sum(
            stan::math::log(stan::math::diagonal(L_beta_precision))))
          - (2 *
          stan::math::sum(
            stan::math::log(stan::math::diagonal(L_beta_prior_precision)))))
          + log_det) + y_tildet_Q_y_tilde) -
          stan::math::sum(
            stan::math::square(
              stan::math::mdivide_left_tri_low(L_beta_precision, Xt_Q_y_tilde)))));
      }
      if (emit_transformed_parameters__) {
        out__.write(beta_hat);
        out__.write(log_marginal);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        exponential_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= n_exponential_kernels; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(exponential_sigma_squared,
            in__.read<local_scalar_t__>(),
            "assigning variable exponential_sigma_squared",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, exponential_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> exponential_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          current_statement__ = 2;
          for (int sym3__ = 1; sym3__ <= n_exponential_kernels; ++sym3__) {
            current_statement__ = 2;
            stan::model::assign(exponential_L, in__.read<local_scalar_t__>(),
              "assigning variable exponential_L",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(exponential_L);
      std::vector<local_scalar_t__> exponential_ell =
        std::vector<local_scalar_t__>(n_exponential_kernels, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(exponential_ell,
        in__.read<std::vector<local_scalar_t__>>(n_exponential_kernels),
        "assigning variable exponential_ell");
      out__.write_free_lb(0, exponential_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        matern32_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern32_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_matern32_kernels; ++sym2__) {
          current_statement__ = 4;
          stan::model::assign(matern32_sigma_squared,
            in__.read<local_scalar_t__>(),
            "assigning variable matern32_sigma_squared",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, matern32_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> matern32_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_matern32_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          current_statement__ = 5;
          for (int sym3__ = 1; sym3__ <= n_matern32_kernels; ++sym3__) {
            current_statement__ = 5;
            stan::model::assign(matern32_L, in__.read<local_scalar_t__>(),
              "assigning variable matern32_L",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(matern32_L);
      std::vector<local_scalar_t__> matern32_ell =
        std::vector<local_scalar_t__>(n_matern32_kernels, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(matern32_ell,
        in__.read<std::vector<local_scalar_t__>>(n_matern32_kernels),
        "assigning variable matern32_ell");
      out__.write_free_lb(0, matern32_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        matern52_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern52_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_matern52_kernels; ++sym2__) {
          current_statement__ = 7;
          stan::model::assign(matern52_sigma_squared,
            in__.read<local_scalar_t__>(),
            "assigning variable matern52_sigma_squared",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, matern52_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> matern52_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_matern52_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          current_statement__ = 8;
          for (int sym3__ = 1; sym3__ <= n_matern52_kernels; ++sym3__) {
            current_statement__ = 8;
            stan::model::assign(matern52_L, in__.read<local_scalar_t__>(),
              "assigning variable matern52_L",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(matern52_L);
      std::vector<local_scalar_t__> matern52_ell =
        std::vector<local_scalar_t__>(n_matern52_kernels, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(matern52_ell,
        in__.read<std::vector<local_scalar_t__>>(n_matern52_kernels),
        "assigning variable matern52_ell");
      out__.write_free_lb(0, matern52_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        squared_exponential_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_squared_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <=
             n_squared_exponential_kernels; ++sym2__) {
          current_statement__ = 10;
          stan::model::assign(squared_exponential_sigma_squared,
            in__.read<local_scalar_t__>(),
            "assigning variable squared_exponential_sigma_squared",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, squared_exponential_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>
        squared_exponential_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_squared_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          current_statement__ = 11;
          for (int sym3__ = 1; sym3__ <=
               n_squared_exponential_kernels; ++sym3__) {
            current_statement__ = 11;
            stan::model::assign(squared_exponential_L,
              in__.read<local_scalar_t__>(),
              "assigning variable squared_exponential_L",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(squared_exponential_L);
      std::vector<local_scalar_t__> squared_exponential_ell =
        std::vector<local_scalar_t__>(n_squared_exponential_kernels,
          DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(squared_exponential_ell,
        in__.read<
          std::vector<local_scalar_t__>>(n_squared_exponential_kernels),
        "assigning variable squared_exponential_ell");
      out__.write_free_lb(0, squared_exponential_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        quasi_periodic_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= n_quasi_periodic_kernels; ++sym2__) {
          current_statement__ = 13;
          stan::model::assign(quasi_periodic_sigma_squared,
            in__.read<local_scalar_t__>(),
            "assigning variable quasi_periodic_sigma_squared",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, quasi_periodic_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> quasi_periodic_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          current_statement__ = 14;
          for (int sym3__ = 1; sym3__ <= n_quasi_periodic_kernels; ++sym3__) {
            current_statement__ = 14;
            stan::model::assign(quasi_periodic_L,
              in__.read<local_scalar_t__>(),
              "assigning variable quasi_periodic_L",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(quasi_periodic_L);
      std::vector<local_scalar_t__> quasi_periodic_ell_periodic =
        std::vector<local_scalar_t__>(n_quasi_periodic_kernels, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(quasi_periodic_ell_periodic,
        in__.read<std::vector<local_scalar_t__>>(n_quasi_periodic_kernels),
        "assigning variable quasi_periodic_ell_periodic");
      out__.write_free_lb(0, quasi_periodic_ell_periodic);
      std::vector<local_scalar_t__> quasi_periodic_ell_decay =
        std::vector<local_scalar_t__>(n_quasi_periodic_kernels, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(quasi_periodic_ell_decay,
        in__.read<std::vector<local_scalar_t__>>(n_quasi_periodic_kernels),
        "assigning variable quasi_periodic_ell_decay");
      out__.write_free_lb(0, quasi_periodic_ell_decay);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        white_noise_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_white_noise_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 17;
        for (int sym2__ = 1; sym2__ <= n_white_noise_kernels; ++sym2__) {
          current_statement__ = 17;
          stan::model::assign(white_noise_sigma_squared,
            in__.read<local_scalar_t__>(),
            "assigning variable white_noise_sigma_squared",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, white_noise_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> white_noise_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_white_noise_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
        current_statement__ = 18;
        for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
          current_statement__ = 18;
          for (int sym3__ = 1; sym3__ <= n_white_noise_kernels; ++sym3__) {
            current_statement__ = 18;
            stan::model::assign(white_noise_L, in__.read<local_scalar_t__>(),
              "assigning variable white_noise_L",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_cholesky_factor_corr(white_noise_L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization",
        "exponential_sigma_squared", "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels),
          static_cast<size_t>(d)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "exponential_L",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels),
          static_cast<size_t>(d), static_cast<size_t>(d)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "exponential_ell",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "matern32_sigma_squared", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels),
          static_cast<size_t>(d)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "matern32_L",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels),
          static_cast<size_t>(d), static_cast<size_t>(d)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "matern32_ell",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "matern52_sigma_squared", "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels),
          static_cast<size_t>(d)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "matern52_L",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels),
          static_cast<size_t>(d), static_cast<size_t>(d)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "matern52_ell",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "squared_exponential_sigma_squared", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels),
          static_cast<size_t>(d)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization",
        "squared_exponential_L", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels),
          static_cast<size_t>(d), static_cast<size_t>(d)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "squared_exponential_ell", "double",
        std::vector<size_t>{static_cast<size_t>(n_squared_exponential_kernels)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization",
        "quasi_periodic_sigma_squared", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels),
          static_cast<size_t>(d)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "quasi_periodic_L",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels),
          static_cast<size_t>(d), static_cast<size_t>(d)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization",
        "quasi_periodic_ell_periodic", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization",
        "quasi_periodic_ell_decay", "double",
        std::vector<size_t>{static_cast<size_t>(n_quasi_periodic_kernels)});
      current_statement__ = 17;
      context__.validate_dims("parameter initialization",
        "white_noise_sigma_squared", "double",
        std::vector<size_t>{static_cast<size_t>(n_white_noise_kernels),
          static_cast<size_t>(d)});
      current_statement__ = 18;
      context__.validate_dims("parameter initialization", "white_noise_L",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_white_noise_kernels),
          static_cast<size_t>(d), static_cast<size_t>(d)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        exponential_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> exponential_sigma_squared_flat__;
        current_statement__ = 1;
        exponential_sigma_squared_flat__ = context__.vals_r("exponential_sigma_squared");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= n_exponential_kernels; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(exponential_sigma_squared,
              exponential_sigma_squared_flat__[(pos__ - 1)],
              "assigning variable exponential_sigma_squared",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, exponential_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> exponential_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> exponential_L_flat__;
        current_statement__ = 2;
        exponential_L_flat__ = context__.vals_r("exponential_L");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 2;
            for (int sym3__ = 1; sym3__ <= n_exponential_kernels; ++sym3__) {
              current_statement__ = 2;
              stan::model::assign(exponential_L, exponential_L_flat__[(pos__
                - 1)], "assigning variable exponential_L",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 2;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(exponential_L);
      std::vector<local_scalar_t__> exponential_ell =
        std::vector<local_scalar_t__>(n_exponential_kernels, DUMMY_VAR__);
      current_statement__ = 3;
      exponential_ell = context__.vals_r("exponential_ell");
      out__.write_free_lb(0, exponential_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        matern32_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern32_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> matern32_sigma_squared_flat__;
        current_statement__ = 4;
        matern32_sigma_squared_flat__ = context__.vals_r("matern32_sigma_squared");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= n_matern32_kernels; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(matern32_sigma_squared,
              matern32_sigma_squared_flat__[(pos__ - 1)],
              "assigning variable matern32_sigma_squared",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, matern32_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> matern32_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_matern32_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> matern32_L_flat__;
        current_statement__ = 5;
        matern32_L_flat__ = context__.vals_r("matern32_L");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 5;
            for (int sym3__ = 1; sym3__ <= n_matern32_kernels; ++sym3__) {
              current_statement__ = 5;
              stan::model::assign(matern32_L, matern32_L_flat__[(pos__ - 1)],
                "assigning variable matern32_L",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 5;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(matern32_L);
      std::vector<local_scalar_t__> matern32_ell =
        std::vector<local_scalar_t__>(n_matern32_kernels, DUMMY_VAR__);
      current_statement__ = 6;
      matern32_ell = context__.vals_r("matern32_ell");
      out__.write_free_lb(0, matern32_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        matern52_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_matern52_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> matern52_sigma_squared_flat__;
        current_statement__ = 7;
        matern52_sigma_squared_flat__ = context__.vals_r("matern52_sigma_squared");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= n_matern52_kernels; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(matern52_sigma_squared,
              matern52_sigma_squared_flat__[(pos__ - 1)],
              "assigning variable matern52_sigma_squared",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, matern52_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> matern52_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_matern52_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> matern52_L_flat__;
        current_statement__ = 8;
        matern52_L_flat__ = context__.vals_r("matern52_L");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 8;
            for (int sym3__ = 1; sym3__ <= n_matern52_kernels; ++sym3__) {
              current_statement__ = 8;
              stan::model::assign(matern52_L, matern52_L_flat__[(pos__ - 1)],
                "assigning variable matern52_L",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 8;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(matern52_L);
      std::vector<local_scalar_t__> matern52_ell =
        std::vector<local_scalar_t__>(n_matern52_kernels, DUMMY_VAR__);
      current_statement__ = 9;
      matern52_ell = context__.vals_r("matern52_ell");
      out__.write_free_lb(0, matern52_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        squared_exponential_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_squared_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> squared_exponential_sigma_squared_flat__;
        current_statement__ = 10;
        squared_exponential_sigma_squared_flat__ = context__.vals_r("squared_exponential_sigma_squared");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <=
               n_squared_exponential_kernels; ++sym2__) {
            current_statement__ = 10;
            stan::model::assign(squared_exponential_sigma_squared,
              squared_exponential_sigma_squared_flat__[(pos__ - 1)],
              "assigning variable squared_exponential_sigma_squared",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 10;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, squared_exponential_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>
        squared_exponential_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_squared_exponential_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> squared_exponential_L_flat__;
        current_statement__ = 11;
        squared_exponential_L_flat__ = context__.vals_r("squared_exponential_L");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 11;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 11;
            for (int sym3__ = 1; sym3__ <=
                 n_squared_exponential_kernels; ++sym3__) {
              current_statement__ = 11;
              stan::model::assign(squared_exponential_L,
                squared_exponential_L_flat__[(pos__ - 1)],
                "assigning variable squared_exponential_L",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 11;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(squared_exponential_L);
      std::vector<local_scalar_t__> squared_exponential_ell =
        std::vector<local_scalar_t__>(n_squared_exponential_kernels,
          DUMMY_VAR__);
      current_statement__ = 12;
      squared_exponential_ell = context__.vals_r("squared_exponential_ell");
      out__.write_free_lb(0, squared_exponential_ell);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        quasi_periodic_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> quasi_periodic_sigma_squared_flat__;
        current_statement__ = 13;
        quasi_periodic_sigma_squared_flat__ = context__.vals_r("quasi_periodic_sigma_squared");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= n_quasi_periodic_kernels; ++sym2__) {
            current_statement__ = 13;
            stan::model::assign(quasi_periodic_sigma_squared,
              quasi_periodic_sigma_squared_flat__[(pos__ - 1)],
              "assigning variable quasi_periodic_sigma_squared",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 13;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, quasi_periodic_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> quasi_periodic_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_quasi_periodic_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> quasi_periodic_L_flat__;
        current_statement__ = 14;
        quasi_periodic_L_flat__ = context__.vals_r("quasi_periodic_L");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 14;
            for (int sym3__ = 1; sym3__ <= n_quasi_periodic_kernels; ++sym3__) {
              current_statement__ = 14;
              stan::model::assign(quasi_periodic_L,
                quasi_periodic_L_flat__[(pos__ - 1)],
                "assigning variable quasi_periodic_L",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 14;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(quasi_periodic_L);
      std::vector<local_scalar_t__> quasi_periodic_ell_periodic =
        std::vector<local_scalar_t__>(n_quasi_periodic_kernels, DUMMY_VAR__);
      current_statement__ = 15;
      quasi_periodic_ell_periodic = context__.vals_r("quasi_periodic_ell_periodic");
      out__.write_free_lb(0, quasi_periodic_ell_periodic);
      std::vector<local_scalar_t__> quasi_periodic_ell_decay =
        std::vector<local_scalar_t__>(n_quasi_periodic_kernels, DUMMY_VAR__);
      current_statement__ = 16;
      quasi_periodic_ell_decay = context__.vals_r("quasi_periodic_ell_decay");
      out__.write_free_lb(0, quasi_periodic_ell_decay);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        white_noise_sigma_squared =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_white_noise_kernels,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> white_noise_sigma_squared_flat__;
        current_statement__ = 17;
        white_noise_sigma_squared_flat__ = context__.vals_r("white_noise_sigma_squared");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= n_white_noise_kernels; ++sym2__) {
            current_statement__ = 17;
            stan::model::assign(white_noise_sigma_squared,
              white_noise_sigma_squared_flat__[(pos__ - 1)],
              "assigning variable white_noise_sigma_squared",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 17;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, white_noise_sigma_squared);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> white_noise_L =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_white_noise_kernels,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(d, d, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> white_noise_L_flat__;
        current_statement__ = 18;
        white_noise_L_flat__ = context__.vals_r("white_noise_L");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
            current_statement__ = 18;
            for (int sym3__ = 1; sym3__ <= n_white_noise_kernels; ++sym3__) {
              current_statement__ = 18;
              stan::model::assign(white_noise_L, white_noise_L_flat__[(pos__
                - 1)], "assigning variable white_noise_L",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 18;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_cholesky_factor_corr(white_noise_L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"exponential_sigma_squared",
                "exponential_L", "exponential_ell", "matern32_sigma_squared",
                "matern32_L", "matern32_ell", "matern52_sigma_squared",
                "matern52_L", "matern52_ell",
                "squared_exponential_sigma_squared", "squared_exponential_L",
                "squared_exponential_ell", "quasi_periodic_sigma_squared",
                "quasi_periodic_L", "quasi_periodic_ell_periodic",
                "quasi_periodic_ell_decay", "white_noise_sigma_squared",
                "white_noise_L"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"beta_hat", "log_marginal"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_exponential_kernels),
                                                 static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(n_exponential_kernels),
                  static_cast<size_t>(d), static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(n_exponential_kernels)},
                std::vector<size_t>{static_cast<size_t>(n_matern32_kernels),
                  static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(n_matern32_kernels),
                  static_cast<size_t>(d), static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(n_matern32_kernels)},
                std::vector<size_t>{static_cast<size_t>(n_matern52_kernels),
                  static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(n_matern52_kernels),
                  static_cast<size_t>(d), static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(n_matern52_kernels)},
                std::vector<size_t>{static_cast<size_t>(
                                      n_squared_exponential_kernels),
                  static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(
                                      n_squared_exponential_kernels),
                  static_cast<size_t>(d), static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(
                                      n_squared_exponential_kernels)},
                std::vector<size_t>{static_cast<size_t>(
                                      n_quasi_periodic_kernels),
                  static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(
                                      n_quasi_periodic_kernels),
                  static_cast<size_t>(d), static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(
                                      n_quasi_periodic_kernels)},
                std::vector<size_t>{static_cast<size_t>(
                                      n_quasi_periodic_kernels)},
                std::vector<size_t>{static_cast<size_t>(n_white_noise_kernels),
                  static_cast<size_t>(d)},
                std::vector<size_t>{static_cast<size_t>(n_white_noise_kernels),
                  static_cast<size_t>(d), static_cast<size_t>(d)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(p_stacked)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_exponential_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "exponential_sigma_squared" + '.' + std::to_string(sym2__) + '.' +
          std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= n_exponential_kernels; ++sym3__) {
          param_names__.emplace_back(std::string() + "exponential_L" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= n_exponential_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "exponential_ell" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_matern32_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "matern32_sigma_squared" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= n_matern32_kernels; ++sym3__) {
          param_names__.emplace_back(std::string() + "matern32_L" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= n_matern32_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "matern32_ell" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_matern52_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "matern52_sigma_squared" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= n_matern52_kernels; ++sym3__) {
          param_names__.emplace_back(std::string() + "matern52_L" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= n_matern52_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "matern52_ell" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_squared_exponential_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "squared_exponential_sigma_squared" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
        for (int sym3__ = 1; sym3__ <=
             n_squared_exponential_kernels; ++sym3__) {
          param_names__.emplace_back(std::string() + "squared_exponential_L"
            + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) +
            '.' + std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= n_squared_exponential_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "squared_exponential_ell" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_quasi_periodic_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "quasi_periodic_sigma_squared" + '.' + std::to_string(sym2__) + '.'
          + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= n_quasi_periodic_kernels; ++sym3__) {
          param_names__.emplace_back(std::string() + "quasi_periodic_L" + '.'
            + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= n_quasi_periodic_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() +
        "quasi_periodic_ell_periodic" + '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_quasi_periodic_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "quasi_periodic_ell_decay" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_white_noise_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "white_noise_sigma_squared" + '.' + std::to_string(sym2__) + '.' +
          std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= d; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= n_white_noise_kernels; ++sym3__) {
          param_names__.emplace_back(std::string() + "white_noise_L" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p_stacked; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_hat" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_marginal");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_exponential_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "exponential_sigma_squared" + '.' + std::to_string(sym2__) + '.' +
          std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((d * (d - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_exponential_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "exponential_L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_exponential_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "exponential_ell" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_matern32_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "matern32_sigma_squared" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((d * (d - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_matern32_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "matern32_L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_matern32_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "matern32_ell" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_matern52_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "matern52_sigma_squared" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((d * (d - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_matern52_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "matern52_L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_matern52_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "matern52_ell" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_squared_exponential_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "squared_exponential_sigma_squared" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((d * (d - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_squared_exponential_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "squared_exponential_L" +
          '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_squared_exponential_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "squared_exponential_ell" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_quasi_periodic_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "quasi_periodic_sigma_squared" + '.' + std::to_string(sym2__) + '.'
          + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((d * (d - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_quasi_periodic_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "quasi_periodic_L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_quasi_periodic_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() +
        "quasi_periodic_ell_periodic" + '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_quasi_periodic_kernels; ++sym1__) {
      param_names__.emplace_back(std::string() + "quasi_periodic_ell_decay" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= d; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_white_noise_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "white_noise_sigma_squared" + '.' + std::to_string(sym2__) + '.' +
          std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((d * (d - 1)) / 2); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_white_noise_kernels; ++sym2__) {
        param_names__.emplace_back(std::string() + "white_noise_L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p_stacked; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_hat" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_marginal");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"exponential_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exponential_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"exponential_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exponential_kernels) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"exponential_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exponential_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"matern32_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern32_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"matern32_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern32_kernels) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"matern32_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern32_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"matern52_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern52_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"matern52_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern52_kernels) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"matern52_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern52_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"squared_exponential_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_squared_exponential_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"squared_exponential_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_squared_exponential_kernels) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"squared_exponential_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_squared_exponential_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_ell_periodic\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_ell_decay\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"white_noise_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_white_noise_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"white_noise_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_white_noise_kernels) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(d) + ",\"cols\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"beta_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_stacked) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_marginal\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"exponential_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exponential_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"exponential_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exponential_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((d * (d - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"exponential_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exponential_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"matern32_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern32_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"matern32_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern32_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((d * (d - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"matern32_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern32_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"matern52_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern52_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"matern52_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern52_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((d * (d - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"matern52_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_matern52_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"squared_exponential_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_squared_exponential_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"squared_exponential_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_squared_exponential_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((d * (d - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"squared_exponential_ell\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_squared_exponential_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((d * (d - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_ell_periodic\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"quasi_periodic_ell_decay\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_quasi_periodic_kernels) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"white_noise_sigma_squared\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_white_noise_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(d) + "}},\"block\":\"parameters\"},{\"name\":\"white_noise_L\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_white_noise_kernels) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(((d * (d - 1)) /2)) + "}},\"block\":\"parameters\"},{\"name\":\"beta_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_stacked) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_marginal\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((n_exponential_kernels * d)
      + ((n_exponential_kernels * d) * d)) + n_exponential_kernels) +
      (n_matern32_kernels * d)) + ((n_matern32_kernels * d) * d)) +
      n_matern32_kernels) + (n_matern52_kernels * d)) + ((n_matern52_kernels
      * d) * d)) + n_matern52_kernels) + (n_squared_exponential_kernels * d))
      + ((n_squared_exponential_kernels * d) * d)) +
      n_squared_exponential_kernels) + (n_quasi_periodic_kernels * d)) +
      ((n_quasi_periodic_kernels * d) * d)) + n_quasi_periodic_kernels) +
      n_quasi_periodic_kernels) + (n_white_noise_kernels * d)) +
      ((n_white_noise_kernels * d) * d));
    const size_t num_transformed = emit_transformed_parameters * ((p_stacked
      + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((n_exponential_kernels * d)
      + ((n_exponential_kernels * d) * d)) + n_exponential_kernels) +
      (n_matern32_kernels * d)) + ((n_matern32_kernels * d) * d)) +
      n_matern32_kernels) + (n_matern52_kernels * d)) + ((n_matern52_kernels
      * d) * d)) + n_matern52_kernels) + (n_squared_exponential_kernels * d))
      + ((n_squared_exponential_kernels * d) * d)) +
      n_squared_exponential_kernels) + (n_quasi_periodic_kernels * d)) +
      ((n_quasi_periodic_kernels * d) * d)) + n_quasi_periodic_kernels) +
      n_quasi_periodic_kernels) + (n_white_noise_kernels * d)) +
      ((n_white_noise_kernels * d) * d));
    const size_t num_transformed = emit_transformed_parameters * ((p_stacked
      + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ptide_namespace::model_ptide;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ptide_namespace::profiles__;
}
#endif
#endif
