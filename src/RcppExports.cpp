// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ptideCovariance
Rcpp::NumericVector ptideCovariance(const Eigen::VectorXd& x, const Rcpp::List& fit, const Eigen::VectorXi& include_noise);
RcppExport SEXP _ptide_ptideCovariance(SEXP xSEXP, SEXP fitSEXP, SEXP include_noiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type include_noise(include_noiseSEXP);
    rcpp_result_gen = Rcpp::wrap(ptideCovariance(x, fit, include_noise));
    return rcpp_result_gen;
END_RCPP
}
// ptideCrossCovariance
Rcpp::NumericVector ptideCrossCovariance(const Eigen::VectorXd& x1, const Eigen::VectorXd& x2, const Rcpp::List& fit);
RcppExport SEXP _ptide_ptideCrossCovariance(SEXP x1SEXP, SEXP x2SEXP, SEXP fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type fit(fitSEXP);
    rcpp_result_gen = Rcpp::wrap(ptideCrossCovariance(x1, x2, fit));
    return rcpp_result_gen;
END_RCPP
}
// parent_knn
Rcpp::IntegerMatrix parent_knn(const Eigen::MatrixXd& x, int n_parents, int leaf_size);
RcppExport SEXP _ptide_parent_knn(SEXP xSEXP, SEXP n_parentsSEXP, SEXP leaf_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n_parents(n_parentsSEXP);
    Rcpp::traits::input_parameter< int >::type leaf_size(leaf_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(parent_knn(x, n_parents, leaf_size));
    return rcpp_result_gen;
END_RCPP
}
// set_tbb_threads
int set_tbb_threads(int n_threads);
RcppExport SEXP _ptide_set_tbb_threads(SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_tbb_threads(n_threads));
    return rcpp_result_gen;
END_RCPP
}
// get_tbb_threads
int get_tbb_threads();
RcppExport SEXP _ptide_get_tbb_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(get_tbb_threads());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4ptide_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_ptide_ptideCovariance", (DL_FUNC) &_ptide_ptideCovariance, 3},
    {"_ptide_ptideCrossCovariance", (DL_FUNC) &_ptide_ptideCrossCovariance, 3},
    {"_ptide_parent_knn", (DL_FUNC) &_ptide_parent_knn, 3},
    {"_ptide_set_tbb_threads", (DL_FUNC) &_ptide_set_tbb_threads, 1},
    {"_ptide_get_tbb_threads", (DL_FUNC) &_ptide_get_tbb_threads, 0},
    {"_rcpp_module_boot_stan_fit4ptide_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4ptide_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ptide(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
